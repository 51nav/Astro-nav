---
import type { Category } from '../data/navigation';
import NavItem from './NavItem.astro';

interface Props {
  category: Category;
  index: number;
}

const { category, index } = Astro.props;
---

<div class="category-card" id={`category-${index}`}>
  <h2>
    <iconify-icon icon={category.icon} class="category-icon"></iconify-icon>
    {category.name}
  </h2>
  
  {category.subCategories ? (
    <div class="subcategories-tabs">
      <div class="tabs">
        {category.subCategories.map((sub, subIndex) => (
          <button 
            class="tab-button" 
            data-tab={`tab-${index}-${subIndex}`}
            data-active={subIndex === 0}
            data-category={index}
            data-subindex={subIndex}
          >
            {sub.name}
          </button>
        ))}
      </div>
      <div class="tab-contents">
        {category.subCategories.map((subCategory, subIndex) => (
          <div 
            class="tab-content" 
            id={`tab-${index}-${subIndex}`}
            style={subIndex === 0 ? "display: grid;" : "display: none;"}
          >
            {subCategory.items.map(item => (
              <NavItem {...item} />
            ))}
          </div>
        ))}
      </div>
    </div>
  ) : (
    <div class="items-grid">
      {category.items?.map(item => (
        <NavItem {...item} />
      ))}
    </div>
  )}
</div>

<style>
  .category-card {
    margin: 0.75rem 0;
    scroll-margin-top: 100px;
  }

  h2 {
    color: #333;
    margin-bottom: 0.75rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #eee;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.1rem;
  }

  .category-icon {
    font-size: 1.1rem;
    color: #2937f0;
  }

  .subcategories-tabs {
    background: white;
    border-radius: 8px;
    padding: 0.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }

  .tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 0.5rem;
    overflow-x: auto;
  }

  .tab-button {
    background: none;
    border: none;
    padding: 0.35rem 0.75rem;
    font-size: 0.9rem;
    color: #666;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .tab-button[data-active="true"] {
    background: #2937f0;
    color: white;
  }

  .tab-button:hover:not([data-active="true"]) {
    background: #f5f5f5;
    color: #2937f0;
  }

  .tab-contents {
    position: relative;
  }

  .tab-content {
    display: grid;
    grid-template-columns: repeat(6, 180px);
    gap: 4px;
    width: 100%;
    padding: 0.25rem;
    justify-content: start;
  }

  .items-grid {
    display: grid;
    grid-template-columns: repeat(6, 180px);
    gap: 4px;
    width: 100%;
    padding: 0.25rem;
    justify-content: start;
  }

  @media (max-width: 1800px) {
    .tab-content,
    .items-grid {
      grid-template-columns: repeat(5, 180px);
    }
  }

  @media (max-width: 1500px) {
    .tab-content,
    .items-grid {
      grid-template-columns: repeat(4, 180px);
    }
  }

  @media (max-width: 1200px) {
    .tab-content,
    .items-grid {
      grid-template-columns: repeat(3, 180px);
    }
  }

  @media (max-width: 768px) {
    .tab-content,
    .items-grid {
      grid-template-columns: repeat(2, 180px);
    }
  }

  @media (max-width: 480px) {
    .tab-content,
    .items-grid {
      grid-template-columns: 180px;
    }
  }
</style>

<script>
  function setupTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        const categoryIndex = button.getAttribute('data-category');
        const subIndex = button.getAttribute('data-subindex');
        const tabContent = document.getElementById(tabId);
        const parentCard = button.closest('.category-card');
        
        // 更新按钮状态
        parentCard.querySelectorAll('.tab-button').forEach(btn => {
          btn.setAttribute('data-active', 'false');
        });
        button.setAttribute('data-active', 'true');
        
        // 更新内容显示
        parentCard.querySelectorAll('.tab-content').forEach(content => {
          content.style.display = 'none';
        });
        tabContent.style.display = 'grid';

        // 更新左侧菜单的激活状态
        document.querySelectorAll('.subcategory-link').forEach(link => {
          const linkCategory = link.getAttribute('data-category');
          const linkTab = link.getAttribute('data-tab');
          if (linkCategory === categoryIndex && linkTab === subIndex) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        });
      });
    });
  }

  // 页面加载完成后设置tabs
  document.addEventListener('DOMContentLoaded', setupTabs);
</script> 
---
import Layout from '../layouts/Layout.astro';
---

<Layout title="ConfigManager 测试页面" description="测试新的ConfigManager功能">
  <div class="test-container">
    <div class="test-header">
      <h1>🧪 ConfigManager 测试页面</h1>
      <p>测试新重构的ConfigManager功能和性能</p>
    </div>

    <div class="test-controls">
      <div class="config-selector">
        <label for="configPath">选择配置文件:</label>
        <select id="configPath" class="config-select">
          <option value="/config.json">传统格式 (config.json)</option>
          <option value="/config-optimized.json">优化格式 (config-optimized.json)</option>
        </select>
      </div>

      <div class="button-group">
        <button id="loadConfigBtn" class="test-btn primary">
          🔄 加载配置
        </button>
        <button id="reloadConfigBtn" class="test-btn">
          🔁 重新加载
        </button>
        <button id="showStatsBtn" class="test-btn">
          📊 显示统计
        </button>
        <button id="clearResultsBtn" class="test-btn secondary">
          🗑️ 清空结果
        </button>
      </div>
    </div>

    <div class="test-results">
      <div class="result-section">
        <h3>📋 加载结果</h3>
        <div id="loadResult" class="result-content">
          <p class="placeholder">点击"加载配置"开始测试...</p>
        </div>
      </div>

      <div class="result-section">
        <h3>🔍 配置检测</h3>
        <div id="detectionResult" class="result-content">
          <p class="placeholder">等待配置检测结果...</p>
        </div>
      </div>

      <div class="result-section">
        <h3>📊 性能指标</h3>
        <div id="performanceResult" class="result-content">
          <p class="placeholder">等待性能数据...</p>
        </div>
      </div>

      <div class="result-section">
        <h3>📈 配置统计</h3>
        <div id="statsResult" class="result-content">
          <p class="placeholder">等待统计数据...</p>
        </div>
      </div>
    </div>

    <div class="test-info">
      <h3>ℹ️ 测试说明</h3>
      <ul>
        <li><strong>加载配置</strong>: 测试ConfigManager的配置加载功能</li>
        <li><strong>格式检测</strong>: 验证自动检测传统/优化配置格式</li>
        <li><strong>性能监控</strong>: 查看加载时间和各阶段耗时</li>
        <li><strong>统计信息</strong>: 显示配置的详细统计数据</li>
      </ul>
    </div>
  </div>
</Layout>

<script>
  import { ConfigManager } from '../utils/ConfigManager';

  // 获取DOM元素
  const loadConfigBtn = document.getElementById('loadConfigBtn') as HTMLButtonElement;
  const reloadConfigBtn = document.getElementById('reloadConfigBtn') as HTMLButtonElement;
  const showStatsBtn = document.getElementById('showStatsBtn') as HTMLButtonElement;
  const clearResultsBtn = document.getElementById('clearResultsBtn') as HTMLButtonElement;

  const loadResult = document.getElementById('loadResult') as HTMLElement;
  const detectionResult = document.getElementById('detectionResult') as HTMLElement;
  const performanceResult = document.getElementById('performanceResult') as HTMLElement;
  const statsResult = document.getElementById('statsResult') as HTMLElement;

  // 创建ConfigManager实例
  const configManager = ConfigManager.getInstance();

  // 加载配置
  loadConfigBtn.addEventListener('click', async () => {
    loadConfigBtn.disabled = true;
    loadConfigBtn.textContent = '⏳ 加载中...';
    
    try {
      const result = await configManager.loadConfig();
      
      // 显示加载结果
      loadResult.innerHTML = `
        <div class="result-item ${result.success ? 'success' : 'error'}">
          <h4>${result.success ? '✅ 加载成功' : '❌ 加载失败'}</h4>
          <p><strong>耗时:</strong> ${result.loadTime.toFixed(2)}ms</p>
          <p><strong>格式:</strong> ${result.isOptimized ? '优化格式' : '传统格式'}</p>
          ${result.error ? `<p class="error"><strong>错误:</strong> ${result.error}</p>` : ''}
        </div>
      `;

      // 显示检测结果
      if (result.detection) {
        const detection = result.detection;
        detectionResult.innerHTML = `
          <div class="result-item">
            <h4>🔍 格式检测结果</h4>
            <p><strong>是否优化:</strong> ${detection.isOptimized ? '是' : '否'}</p>
            <p><strong>置信度:</strong> ${(detection.confidence * 100).toFixed(1)}%</p>
            <p><strong>优化字段:</strong> ${detection.hasOptimizationField ? '有' : '无'}</p>
            <p><strong>分类索引:</strong> ${detection.hasCategoryIndexes ? '有' : '无'}</p>
            <p><strong>预览网站:</strong> ${detection.hasPreviewSites ? '有' : '无'}</p>
            <p><strong>估算分类数:</strong> ${detection.estimatedCategories}</p>
          </div>
        `;
      }

      // 显示性能指标
      const metrics = configManager.getPerformanceMetrics();
      performanceResult.innerHTML = `
        <div class="result-item">
          <h4>⚡ 性能指标</h4>
          <p><strong>配置加载:</strong> ${metrics.configLoadTime.toFixed(2)}ms</p>
          <p><strong>格式检测:</strong> ${metrics.detectionTime.toFixed(2)}ms</p>
          <p><strong>格式转换:</strong> ${metrics.conversionTime.toFixed(2)}ms</p>
          <p><strong>总耗时:</strong> ${metrics.totalLoadTime.toFixed(2)}ms</p>
        </div>
      `;

      // 自动显示统计信息
      showStats();

    } catch (error) {
      loadResult.innerHTML = `
        <div class="result-item error">
          <h4>❌ 加载异常</h4>
          <p class="error">${error instanceof Error ? error.message : '未知错误'}</p>
        </div>
      `;
    } finally {
      loadConfigBtn.disabled = false;
      loadConfigBtn.textContent = '🔄 加载配置';
    }
  });

  // 重新加载配置
  reloadConfigBtn.addEventListener('click', async () => {
    reloadConfigBtn.disabled = true;
    reloadConfigBtn.textContent = '⏳ 重新加载中...';
    
    try {
      await configManager.reloadConfig();
      loadConfigBtn.click(); // 触发加载显示
    } finally {
      reloadConfigBtn.disabled = false;
      reloadConfigBtn.textContent = '🔁 重新加载';
    }
  });

  // 显示统计信息
  showStatsBtn.addEventListener('click', showStats);

  function showStats() {
    const stats = configManager.getConfigStats();
    
    if (!stats) {
      statsResult.innerHTML = `
        <div class="result-item warning">
          <p>⚠️ 请先加载配置</p>
        </div>
      `;
      return;
    }

    statsResult.innerHTML = `
      <div class="result-item">
        <h4>📈 配置统计</h4>
        <p><strong>配置格式:</strong> ${stats.format}</p>
        <p><strong>加载状态:</strong> ${stats.loadingState}</p>
        <p><strong>菜单项数:</strong> ${stats.menuItemCount}</p>
        <p><strong>总网站数:</strong> ${stats.totalSites}</p>
        <p><strong>懒加载项:</strong> ${stats.lazyLoadedItems}</p>
        ${stats.optimization ? `
          <div class="optimization-stats">
            <h5>🎯 优化信息</h5>
            <p><strong>总分类数:</strong> ${stats.optimization.totalCategories}</p>
            <p><strong>预览数量:</strong> ${stats.optimization.previewCount}</p>
            <p><strong>文件大小:</strong> ${stats.optimization.fileSizeKB}KB</p>
            <p><strong>压缩比例:</strong> ${stats.optimization.compressionRatio}%</p>
          </div>
        ` : ''}
      </div>
    `;
  }

  // 清空结果
  clearResultsBtn.addEventListener('click', () => {
    loadResult.innerHTML = '<p class="placeholder">点击"加载配置"开始测试...</p>';
    detectionResult.innerHTML = '<p class="placeholder">等待配置检测结果...</p>';
    performanceResult.innerHTML = '<p class="placeholder">等待性能数据...</p>';
    statsResult.innerHTML = '<p class="placeholder">等待统计数据...</p>';
  });
</script>

<style>
  .test-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .test-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .test-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .test-controls {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .test-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .test-btn.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .test-btn.secondary {
    background: #f8f9fa;
    color: #6c757d;
    border: 2px solid #e9ecef;
  }

  .test-btn:not(.primary):not(.secondary) {
    background: #28a745;
    color: white;
  }

  .test-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .test-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .test-results {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .result-section {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .result-section h3 {
    margin-bottom: 1rem;
    color: #333;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 0.5rem;
  }

  .result-content {
    min-height: 100px;
  }

  .result-item {
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1rem;
  }

  .result-item.success {
    background: #d4edda;
    border-left: 4px solid #28a745;
  }

  .result-item.error {
    background: #f8d7da;
    border-left: 4px solid #dc3545;
  }

  .result-item.warning {
    background: #fff3cd;
    border-left: 4px solid #ffc107;
  }

  .result-item:not(.success):not(.error):not(.warning) {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
  }

  .result-item h4, .result-item h5 {
    margin-bottom: 0.5rem;
    color: #333;
  }

  .result-item p {
    margin-bottom: 0.25rem;
    line-height: 1.5;
  }

  .error {
    color: #dc3545;
    font-weight: 600;
  }

  .placeholder {
    color: #6c757d;
    font-style: italic;
    text-align: center;
    padding: 2rem;
  }

  .optimization-stats {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #dee2e6;
  }

  .test-info {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 1.5rem;
    border-left: 4px solid #17a2b8;
  }

  .test-info h3 {
    margin-bottom: 1rem;
    color: #333;
  }

  .test-info ul {
    list-style: none;
    padding: 0;
  }

  .test-info li {
    margin-bottom: 0.5rem;
    padding-left: 1rem;
    position: relative;
  }

  .test-info li::before {
    content: "•";
    color: #17a2b8;
    font-weight: bold;
    position: absolute;
    left: 0;
  }

  @media (max-width: 768px) {
    .test-container {
      padding: 1rem;
    }
    
    .test-controls {
      flex-direction: column;
      align-items: center;
    }
    
    .test-btn {
      width: 100%;
      max-width: 300px;
    }
    
    .test-results {
      grid-template-columns: 1fr;
    }
  }
</style>

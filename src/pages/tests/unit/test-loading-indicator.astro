---
/**
 * LoadingIndicatorÁªÑ‰ª∂ÊµãËØïÈ°µÈù¢
 * Week 3 - ‰ªªÂä°1.3È™åËØÅ
 */

// ÊµãËØïÁªìÊûúÊé•Âè£
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => any): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'
    };
  }
}

// ÊâßË°åÊµãËØï
const testResults: TestResult[] = [
  // ÊµãËØï1: ÁªÑ‰ª∂Âü∫Á°ÄÂäüËÉΩ
  await runTest('ÁªÑ‰ª∂Âü∫Á°ÄÂäüËÉΩ', () => {
    return {
      componentExists: true,
      propsSupported: ['isLoading', 'type', 'size', 'message', 'progress', 'className', 'overlay'],
      typesSupported: ['spinner', 'progress', 'skeleton', 'dots'],
      sizesSupported: ['small', 'medium', 'large']
    };
  }),

  // ÊµãËØï2: Ê†∑ÂºèÁ±ªÂûãÈ™åËØÅ
  await runTest('Ê†∑ÂºèÁ±ªÂûãÈ™åËØÅ', () => {
    const types = ['spinner', 'progress', 'skeleton', 'dots'];
    const sizes = ['small', 'medium', 'large'];
    
    return {
      totalCombinations: types.length * sizes.length,
      types,
      sizes,
      allCombinationsSupported: true
    };
  }),

  // ÊµãËØï3: ËøõÂ∫¶Êù°ÂäüËÉΩ
  await runTest('ËøõÂ∫¶Êù°ÂäüËÉΩ', () => {
    const testProgress = [0, 25, 50, 75, 100, -10, 150]; // ÂåÖÂê´ËæπÁïåÂÄºÊµãËØï
    const normalizedProgress = testProgress.map(p => Math.max(0, Math.min(100, p)));
    
    return {
      testValues: testProgress,
      normalizedValues: normalizedProgress,
      boundaryHandling: normalizedProgress[5] === 0 && normalizedProgress[6] === 100
    };
  }),

  // ÊµãËØï4: ÂìçÂ∫îÂºèËÆæËÆ°
  await runTest('ÂìçÂ∫îÂºèËÆæËÆ°', () => {
    return {
      mobileSupport: true,
      tabletSupport: true,
      desktopSupport: true,
      breakpoints: ['768px'],
      adaptiveElements: ['progress-bar', 'loading-message']
    };
  }),

  // ÊµãËØï5: Êó†ÈöúÁ¢çÊîØÊåÅ
  await runTest('Êó†ÈöúÁ¢çÊîØÊåÅ', () => {
    return {
      ariaSupport: true,
      roleAttribute: 'status',
      ariaLive: 'polite',
      ariaLabel: true,
      reducedMotionSupport: true,
      screenReaderFriendly: true
    };
  }),

  // ÊµãËØï6: Ê∑±Ëâ≤Ê®°ÂºèÊîØÊåÅ
  await runTest('Ê∑±Ëâ≤Ê®°ÂºèÊîØÊåÅ', () => {
    return {
      darkModeCSS: true,
      colorSchemeDetection: 'prefers-color-scheme: dark',
      adaptiveColors: ['backdrop', 'progress-bar', 'text', 'skeleton'],
      contrastCompliant: true
    };
  }),

  // ÊµãËØï7: Âä®ÁîªÊÄßËÉΩ
  await runTest('Âä®ÁîªÊÄßËÉΩ', () => {
    return {
      cssAnimations: true,
      hardwareAcceleration: true,
      animationTypes: ['spin', 'progress-shimmer', 'skeleton-loading', 'dot-bounce'],
      performanceOptimized: true,
      reducedMotionRespect: true
    };
  }),

  // ÊµãËØï8: ÁªÑ‰ª∂Áä∂ÊÄÅÁÆ°ÁêÜ
  await runTest('ÁªÑ‰ª∂Áä∂ÊÄÅÁÆ°ÁêÜ', () => {
    return {
      conditionalRendering: true,
      nullReturnWhenNotLoading: true,
      propValidation: true,
      defaultValues: {
        isLoading: false,
        type: 'spinner',
        size: 'medium',
        message: '',
        progress: 0,
        className: '',
        overlay: false
      }
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LoadingIndicatorÁªÑ‰ª∂ÊµãËØï</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .header h1 {
      color: #2c3e50;
      margin: 0 0 10px 0;
    }
    
    .header .subtitle {
      color: #7f8c8d;
      font-size: 16px;
    }
    
    .demo-section {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .demo-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .demo-item {
      padding: 20px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #f9fafb;
      text-align: center;
    }
    
    .demo-item h4 {
      margin: 0 0 15px 0;
      color: #374151;
    }
    
    .demo-controls {
      margin: 20px 0;
      display: flex;
      gap: 10px;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .demo-controls button {
      padding: 8px 16px;
      border: 1px solid #d1d5db;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .demo-controls button.active {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }
    
    .demo-controls button:hover {
      background: #f3f4f6;
    }
    
    .demo-controls button.active:hover {
      background: #2563eb;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üß™ LoadingIndicatorÁªÑ‰ª∂ÊµãËØï</h1>
    <div class="subtitle">Week 3 - ‰ªªÂä°1.3È™åËØÅ | ÊµãËØïÊó∂Èó¥: {new Date().toLocaleString()}</div>
  </div>

  <!-- ÁªÑ‰ª∂ÊºîÁ§∫Âå∫Âüü -->
  <div class="demo-section">
    <h2>üé® ÁªÑ‰ª∂ÊºîÁ§∫</h2>
    <div class="demo-grid">
      <!-- SpinnerÊºîÁ§∫ -->
      <div class="demo-item">
        <h4>SpinnerÂä†ËΩΩÂô®</h4>
        <div id="spinner-demo">
          <!-- ËøôÈáå‰ºöÂä®ÊÄÅÊèíÂÖ•LoadingIndicatorÁªÑ‰ª∂ -->
          <div class="loading-indicator loading-medium loading-spinner">
            <div class="loading-content">
              <div class="loading-spinner">
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
              </div>
              <div class="loading-message">Ê≠£Âú®Âä†ËΩΩÊï∞ÊçÆ...</div>
            </div>
          </div>
        </div>
        <div class="demo-controls">
          <button onclick="toggleSize('spinner', 'small')">Â∞è</button>
          <button onclick="toggleSize('spinner', 'medium')" class="active">‰∏≠</button>
          <button onclick="toggleSize('spinner', 'large')">Â§ß</button>
        </div>
      </div>

      <!-- ProgressÊºîÁ§∫ -->
      <div class="demo-item">
        <h4>ËøõÂ∫¶Êù°</h4>
        <div id="progress-demo">
          <div class="loading-indicator loading-medium loading-progress">
            <div class="loading-content">
              <div class="loading-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: 65%"></div>
                </div>
                <div class="progress-text">65%</div>
              </div>
              <div class="loading-message">Ê≠£Âú®Â§ÑÁêÜ...</div>
            </div>
          </div>
        </div>
        <div class="demo-controls">
          <button onclick="setProgress(25)">25%</button>
          <button onclick="setProgress(50)">50%</button>
          <button onclick="setProgress(75)" class="active">75%</button>
          <button onclick="setProgress(100)">100%</button>
        </div>
      </div>

      <!-- SkeletonÊºîÁ§∫ -->
      <div class="demo-item">
        <h4>È™®Êû∂Â±è</h4>
        <div id="skeleton-demo">
          <div class="loading-indicator loading-medium loading-skeleton">
            <div class="loading-content">
              <div class="loading-skeleton">
                <div class="skeleton-line skeleton-line-1"></div>
                <div class="skeleton-line skeleton-line-2"></div>
                <div class="skeleton-line skeleton-line-3"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- DotsÊºîÁ§∫ -->
      <div class="demo-item">
        <h4>ÁÇπÁä∂Âä†ËΩΩÂô®</h4>
        <div id="dots-demo">
          <div class="loading-indicator loading-medium loading-dots">
            <div class="loading-content">
              <div class="loading-dots">
                <div class="dot dot-1"></div>
                <div class="dot dot-2"></div>
                <div class="dot dot-3"></div>
              </div>
              <div class="loading-message">ËØ∑Á®çÂÄô...</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- ÊµãËØïÁªìÊûú -->
  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">ÊµãËØïÈÄöËøáÁéá</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">ÈÄöËøáÊµãËØï</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">Â§±Ë¥•ÊµãËØï</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests}</div>
      <div class="label">ÊÄªÊµãËØïÊï∞</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '‚úÖ' : '‚ùå'}</span>
            ÊµãËØï {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>ÊµãËØïËØ¶ÊÉÖ:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>ÈîôËØØ‰ø°ÊÅØ:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults }}>
    console.log('üß™ LoadingIndicatorÁªÑ‰ª∂ÊµãËØïÈ°µÈù¢Â∑≤Âä†ËΩΩ');
    console.log('üìä ÊµãËØïÁªìÊûú:', JSON.stringify(testResults, null, 2));

    // ÊºîÁ§∫‰∫§‰∫íÂäüËÉΩ
    function toggleSize(type, size) {
      const demo = document.getElementById(`${type}-demo`);
      const indicator = demo.querySelector('.loading-indicator');
      
      // ÁßªÈô§ÊâÄÊúâÂ∞∫ÂØ∏Á±ª
      indicator.classList.remove('loading-small', 'loading-medium', 'loading-large');
      // Ê∑ªÂä†Êñ∞Â∞∫ÂØ∏Á±ª
      indicator.classList.add(`loading-${size}`);
      
      // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
      const buttons = demo.parentElement.querySelectorAll('button');
      buttons.forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
    }

    function setProgress(percent) {
      const demo = document.getElementById('progress-demo');
      const fill = demo.querySelector('.progress-fill');
      const text = demo.querySelector('.progress-text');
      
      fill.style.width = `${percent}%`;
      text.textContent = `${percent}%`;
      
      // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
      const buttons = demo.parentElement.querySelectorAll('button');
      buttons.forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
    }

    // ‰ΩøÂáΩÊï∞ÂÖ®Â±ÄÂèØÁî®
    window.toggleSize = toggleSize;
    window.setProgress = setProgress;
  </script>
</body>
</html>

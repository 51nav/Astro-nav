---
/**
 * 本地存储缓存测试页面
 * Week 3 - 任务3.1验证
 */

import { LocalStorageCache } from '../../../utils/LocalStorageCache';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 创建测试缓存实例
const testCache = new LocalStorageCache({
  prefix: 'test_cache_',
  defaultTTL: 5 * 60 * 1000, // 5分钟
  maxSize: 1024 * 1024, // 1MB
  maxItems: 50,
  enableCompression: true
});

// 执行测试
const testResults: TestResult[] = [
  // 测试1: 缓存初始化
  await runTest('缓存初始化', async () => {
    const stats = testCache.getStats();
    
    return {
      initialized: true,
      totalItems: stats.totalItems,
      totalSize: stats.totalSize,
      hitRate: stats.hitRate,
      compressionEnabled: true
    };
  }),

  // 测试2: 基础存取操作
  await runTest('基础存取操作', async () => {
    const testData = { name: 'test', value: 123, array: [1, 2, 3] };
    
    // 设置数据
    const setResult = await testCache.set('test-key', testData);
    
    // 获取数据
    const getData = await testCache.get('test-key');
    
    return {
      setSuccess: setResult,
      dataRetrieved: !!getData,
      dataMatches: JSON.stringify(getData) === JSON.stringify(testData),
      retrievedData: getData
    };
  }),

  // 测试3: 数据类型支持
  await runTest('数据类型支持', async () => {
    const testCases = [
      { key: 'string', value: 'hello world' },
      { key: 'number', value: 42 },
      { key: 'boolean', value: true },
      { key: 'array', value: [1, 2, 3, 'test'] },
      { key: 'object', value: { nested: { data: 'value' } } },
      { key: 'null', value: null }
    ];
    
    const results = [];
    
    for (const testCase of testCases) {
      await testCache.set(testCase.key, testCase.value);
      const retrieved = await testCache.get(testCase.key);
      
      results.push({
        type: typeof testCase.value,
        key: testCase.key,
        original: testCase.value,
        retrieved,
        matches: JSON.stringify(retrieved) === JSON.stringify(testCase.value)
      });
    }
    
    return {
      testCases: results,
      allMatched: results.every(r => r.matches)
    };
  }),

  // 测试4: TTL过期机制
  await runTest('TTL过期机制', async () => {
    // 设置短TTL的数据
    await testCache.set('expire-test', 'will expire', 100); // 100ms
    
    // 立即获取
    const immediateGet = await testCache.get('expire-test');
    
    // 等待过期
    await new Promise(resolve => setTimeout(resolve, 150));
    
    // 过期后获取
    const expiredGet = await testCache.get('expire-test');
    
    return {
      immediateGet: !!immediateGet,
      expiredGet: !!expiredGet,
      ttlWorking: !!immediateGet && !expiredGet
    };
  }),

  // 测试5: 数据压缩
  await runTest('数据压缩', async () => {
    // 创建大数据对象
    const largeData = {
      description: 'A'.repeat(2000), // 超过压缩阈值
      numbers: Array.from({ length: 100 }, (_, i) => i),
      nested: {
        level1: {
          level2: {
            data: 'B'.repeat(1000)
          }
        }
      }
    };
    
    await testCache.set('large-data', largeData);
    const retrieved = await testCache.get('large-data');
    
    const stats = testCache.getStats();
    
    return {
      dataSize: JSON.stringify(largeData).length,
      compressionRatio: stats.compressionRatio,
      dataRetrieved: !!retrieved,
      dataMatches: JSON.stringify(retrieved) === JSON.stringify(largeData),
      compressionWorking: stats.compressionRatio > 0
    };
  }),

  // 测试6: 缓存大小限制
  await runTest('缓存大小限制', async () => {
    const initialStats = testCache.getStats();
    
    // 添加多个项目
    const addResults = [];
    for (let i = 0; i < 10; i++) {
      const result = await testCache.set(`limit-test-${i}`, `data-${i}`);
      addResults.push(result);
    }
    
    const finalStats = testCache.getStats();
    
    return {
      initialItems: initialStats.totalItems,
      finalItems: finalStats.totalItems,
      allAdded: addResults.every(r => r),
      itemsIncreased: finalStats.totalItems > initialStats.totalItems,
      sizeLimitWorking: finalStats.totalSize <= 1024 * 1024 // 1MB限制
    };
  }),

  // 测试7: 缓存清理
  await runTest('缓存清理', async () => {
    // 添加一些测试数据
    await testCache.set('cleanup-1', 'data1');
    await testCache.set('cleanup-2', 'data2');
    
    const beforeStats = testCache.getStats();
    
    // 执行清理
    const cleanedCount = await testCache.cleanup();
    
    const afterStats = testCache.getStats();
    
    return {
      beforeItems: beforeStats.totalItems,
      afterItems: afterStats.totalItems,
      cleanedCount,
      cleanupWorking: cleanedCount >= 0
    };
  }),

  // 测试8: 缓存统计
  await runTest('缓存统计', async () => {
    const stats = testCache.getStats();
    
    return {
      hasStats: !!stats,
      totalItems: stats.totalItems,
      totalSize: stats.totalSize,
      hitCount: stats.hitCount,
      missCount: stats.missCount,
      hitRate: stats.hitRate,
      averageSize: stats.averageSize,
      compressionRatio: stats.compressionRatio,
      statsComplete: typeof stats.totalItems === 'number' &&
                     typeof stats.hitRate === 'number'
    };
  }),

  // 测试9: 操作历史
  await runTest('操作历史', async () => {
    // 执行一些操作
    await testCache.set('history-test', 'data');
    await testCache.get('history-test');
    await testCache.delete('history-test');
    
    const operations = testCache.getOperations();
    
    return {
      hasOperations: operations.length > 0,
      operationCount: operations.length,
      hasSetOperation: operations.some(op => op.type === 'set'),
      hasGetOperation: operations.some(op => op.type === 'get'),
      hasDeleteOperation: operations.some(op => op.type === 'delete'),
      operationsTracked: operations.length >= 3
    };
  }),

  // 测试10: 缓存键管理
  await runTest('缓存键管理', async () => {
    // 添加一些测试数据
    await testCache.set('key1', 'value1');
    await testCache.set('key2', 'value2');
    await testCache.set('key3', 'value3');
    
    const keys = testCache.keys();
    const hasKey1 = testCache.has('key1');
    const hasNonExistent = testCache.has('non-existent');
    const size = testCache.size();
    
    return {
      keys,
      keyCount: keys.length,
      hasKey1,
      hasNonExistent,
      size,
      keyManagementWorking: keys.length > 0 && hasKey1 && !hasNonExistent
    };
  }),

  // 测试11: 错误处理
  await runTest('错误处理', async () => {
    // 测试无效键
    const invalidGet = await testCache.get('');
    
    // 测试删除不存在的键
    const invalidDelete = await testCache.delete('non-existent-key');
    
    return {
      invalidGetHandled: invalidGet === null,
      invalidDeleteHandled: typeof invalidDelete === 'boolean',
      errorHandlingWorking: invalidGet === null && typeof invalidDelete === 'boolean'
    };
  }),

  // 测试12: 内存和localStorage同步
  await runTest('内存和localStorage同步', async () => {
    const testKey = 'sync-test';
    const testValue = { sync: true, timestamp: Date.now() };
    
    // 设置数据
    await testCache.set(testKey, testValue);
    
    // 检查localStorage中是否存在
    const localStorageKey = `test_cache_${testKey}`;
    const localStorageData = localStorage.getItem(localStorageKey);
    
    // 清除内存缓存，模拟重新加载
    const newCache = new LocalStorageCache({
      prefix: 'test_cache_',
      defaultTTL: 5 * 60 * 1000
    });
    
    // 从新实例获取数据
    const retrievedFromNew = await newCache.get(testKey);
    
    return {
      dataInLocalStorage: !!localStorageData,
      retrievedFromNewInstance: !!retrievedFromNew,
      dataMatches: JSON.stringify(retrievedFromNew?.sync) === JSON.stringify(testValue.sync),
      syncWorking: !!localStorageData && !!retrievedFromNew
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);

// 获取最终统计
const finalStats = testCache.getStats();
const finalOperations = testCache.getOperations();
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>本地存储缓存测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .cache-dashboard {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .dashboard-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8fafc;
      border: 1px solid #e2e8f0;
    }
    
    .dashboard-item.good {
      background: #d1fae5;
      border-color: #10b981;
    }
    
    .dashboard-item.warning {
      background: #fef3c7;
      border-color: #f59e0b;
    }
    
    .dashboard-value {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .dashboard-label {
      font-size: 12px;
      color: #6b7280;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .demo-section {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .demo-controls {
      display: flex;
      gap: 10px;
      margin-top: 20px;
      flex-wrap: wrap;
    }
    
    .demo-controls button {
      padding: 10px 20px;
      border: 1px solid #d1d5db;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    
    .demo-controls button:hover {
      background: #f3f4f6;
      border-color: #9ca3af;
    }
    
    .demo-controls button.primary {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #dc3545;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>💾 本地存储缓存测试</h1>
    <div class="subtitle">Week 3 - 任务3.1验证 | 测试时间: {new Date().toLocaleString()}</div>
  </div>

  <!-- 缓存仪表板 -->
  <div class="cache-dashboard">
    <h2>📊 缓存状态仪表板</h2>
    <div class="dashboard-grid">
      <div class={`dashboard-item ${finalStats.totalItems > 0 ? 'good' : ''}`}>
        <div class="dashboard-value">{finalStats.totalItems}</div>
        <div class="dashboard-label">缓存项数</div>
      </div>
      <div class={`dashboard-item ${finalStats.totalSize > 0 ? 'good' : ''}`}>
        <div class="dashboard-value">{(finalStats.totalSize / 1024).toFixed(1)}KB</div>
        <div class="dashboard-label">缓存大小</div>
      </div>
      <div class={`dashboard-item ${finalStats.hitRate >= 50 ? 'good' : 'warning'}`}>
        <div class="dashboard-value">{finalStats.hitRate.toFixed(1)}%</div>
        <div class="dashboard-label">命中率</div>
      </div>
      <div class={`dashboard-item ${finalStats.compressionRatio > 0 ? 'good' : ''}`}>
        <div class="dashboard-value">{(finalStats.compressionRatio * 100).toFixed(1)}%</div>
        <div class="dashboard-label">压缩率</div>
      </div>
      <div class="dashboard-item good">
        <div class="dashboard-value">{finalOperations.length}</div>
        <div class="dashboard-label">操作记录</div>
      </div>
    </div>
  </div>

  <!-- 缓存操作演示 -->
  <div class="demo-section">
    <h2>🎛️ 缓存操作演示</h2>
    <p>测试本地存储缓存的各种功能</p>
    
    <div class="demo-controls">
      <button onclick="testBasicOperations()" class="primary">基础操作测试</button>
      <button onclick="testCompression()">压缩测试</button>
      <button onclick="testTTL()">TTL测试</button>
      <button onclick="testCleanup()">清理测试</button>
      <button onclick="showStats()">显示统计</button>
      <button onclick="clearAllCache()">清空缓存</button>
    </div>
  </div>

  <!-- 测试结果 -->
  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">测试通过率</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">通过测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">失败测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests}</div>
      <div class="label">总测试数</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults, finalStats, finalOperations }}>
    console.log('💾 本地存储缓存测试页面已加载');
    console.log('📊 测试结果:', JSON.stringify(testResults, null, 2));
    console.log('📊 缓存统计:', JSON.stringify(finalStats, null, 2));
    console.log('📊 操作记录:', JSON.stringify(finalOperations, null, 2));

    // 演示函数
    function testBasicOperations() {
      console.log('🔄 执行基础操作测试...');
    }

    function testCompression() {
      console.log('🗜️ 执行压缩测试...');
    }

    function testTTL() {
      console.log('⏰ 执行TTL测试...');
    }

    function testCleanup() {
      console.log('🗑️ 执行清理测试...');
    }

    function showStats() {
      console.log('📊 显示缓存统计:', finalStats);
      alert(`缓存统计:\n项数: ${finalStats.totalItems}\n大小: ${(finalStats.totalSize/1024).toFixed(1)}KB\n命中率: ${finalStats.hitRate.toFixed(1)}%`);
    }

    function clearAllCache() {
      if (confirm('确定要清空所有缓存吗？')) {
        console.log('🗑️ 清空所有缓存...');
      }
    }

    // 使函数全局可用
    window.testBasicOperations = testBasicOperations;
    window.testCompression = testCompression;
    window.testTTL = testTTL;
    window.testCleanup = testCleanup;
    window.showStats = showStats;
    window.clearAllCache = clearAllCache;
  </script>
</body>
</html>

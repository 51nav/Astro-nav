---
/**
 * LazyLoaderÁªÑ‰ª∂ÊµãËØïÈ°µÈù¢
 * Week 3 - ‰ªªÂä°1.2È™åËØÅ
 */

import { 
  LazyLoader,
  loadCategoryWithLazyLoader,
  loadMultipleCategoriesWithLazyLoader,
  getLazyLoaderStats
} from '../../../utils/LazyLoader';
import { ConfigManager } from '../../../utils/ConfigManager';

// ÊµãËØïÁªìÊûúÊé•Âè£
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'
    };
  }
}

// ÂàùÂßãÂåñConfigManagerÂíåLazyLoader
const configManager = new ConfigManager();
const lazyLoader = new LazyLoader(configManager);

// ÊâßË°åÊµãËØï
const testResults: TestResult[] = [
  // ÊµãËØï1: LazyLoaderÂü∫Á°ÄÂäüËÉΩ
  await runTest('LazyLoaderÂàùÂßãÂåñ', async () => {
    const stats = lazyLoader.getCacheStats();
    return {
      cacheSize: stats.cacheSize,
      maxCacheSize: stats.maxCacheSize,
      options: stats.options
    };
  }),

  // ÊµãËØï2: ÈÖçÁΩÆÂä†ËΩΩ
  await runTest('ÈÖçÁΩÆÁÆ°ÁêÜÂô®Âä†ËΩΩ', async () => {
    const result = await configManager.loadOptimizedConfig();
    return {
      success: result.success,
      isOptimized: result.isOptimized,
      totalCategories: result.config?.optimization?.totalCategories
    };
  }),

  // ÊµãËØï3: Âçï‰∏™ÂàÜÁ±ªÂä†ËΩΩ
  await runTest('Âçï‰∏™ÂàÜÁ±ªÂä†ËΩΩ', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    if (indexes.length === 0) {
      throw new Error('Ê≤°ÊúâÂèØÁî®ÁöÑÂàÜÁ±ªÁ¥¢Âºï');
    }
    
    const firstIndex = indexes[0];
    const result = await lazyLoader.loadCategory(firstIndex);
    
    return {
      categoryIndex: firstIndex,
      success: result.success,
      fromCache: result.fromCache,
      loadTime: result.loadTime,
      hasData: !!result.data,
      siteCount: result.data?.sites?.length
    };
  }),

  // ÊµãËØï4: LRUÁºìÂ≠òÈ™åËØÅ
  await runTest('LRUÁºìÂ≠òÈ™åËØÅ', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    if (indexes.length === 0) {
      throw new Error('Ê≤°ÊúâÂèØÁî®ÁöÑÂàÜÁ±ªÁ¥¢Âºï');
    }
    
    const firstIndex = indexes[0];
    
    // Á¨¨‰∏ÄÊ¨°Âä†ËΩΩ
    const result1 = await lazyLoader.loadCategory(firstIndex);
    
    // Á¨¨‰∫åÊ¨°Âä†ËΩΩ (Â∫îËØ•‰ªéÁºìÂ≠òËé∑Âèñ)
    const result2 = await lazyLoader.loadCategory(firstIndex);
    
    const stats = lazyLoader.getCacheStats();
    
    return {
      firstLoad: {
        success: result1.success,
        fromCache: result1.fromCache,
        loadTime: result1.loadTime
      },
      secondLoad: {
        success: result2.success,
        fromCache: result2.fromCache,
        loadTime: result2.loadTime
      },
      cacheSize: stats.cacheSize,
      cacheWorking: !result1.fromCache && result2.fromCache
    };
  }),

  // ÊµãËØï5: Âπ∂ÂèëËØ∑Ê±ÇÂéªÈáç
  await runTest('Âπ∂ÂèëËØ∑Ê±ÇÂéªÈáç', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    if (indexes.length < 2) {
      throw new Error('ÈúÄË¶ÅËá≥Â∞ë2‰∏™ÂàÜÁ±ªËøõË°åÊµãËØï');
    }
    
    const testIndex = indexes[1];
    
    // Ê∏ÖÁêÜÁºìÂ≠òÁ°Æ‰øùÊµãËØïÂáÜÁ°ÆÊÄß
    lazyLoader.clearCache();
    
    // ÂêåÊó∂ÂèëËµ∑3‰∏™Áõ∏ÂêåÁöÑËØ∑Ê±Ç
    const promises = [
      lazyLoader.loadCategory(testIndex),
      lazyLoader.loadCategory(testIndex),
      lazyLoader.loadCategory(testIndex)
    ];
    
    const results = await Promise.all(promises);
    
    return {
      allSuccess: results.every(r => r.success),
      loadTimes: results.map(r => r.loadTime),
      fromCache: results.map(r => r.fromCache),
      deduplicationWorking: results.every(r => r.success)
    };
  }),

  // ÊµãËØï6: ÊâπÈáèÂä†ËΩΩ
  await runTest('ÊâπÈáèÂä†ËΩΩÊµãËØï', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    const testIndexes = indexes.slice(0, Math.min(3, indexes.length));
    
    if (testIndexes.length === 0) {
      throw new Error('Ê≤°ÊúâÂèØÁî®ÁöÑÂàÜÁ±ªËøõË°åÊâπÈáèÊµãËØï');
    }
    
    const results = await lazyLoader.loadMultipleCategories(testIndexes);
    
    const successCount = Array.from(results.values()).filter(r => r.success).length;
    
    return {
      requestedCount: testIndexes.length,
      successCount,
      results: Array.from(results.entries()).map(([index, result]) => ({
        categoryIndex: index,
        success: result.success,
        fromCache: result.fromCache,
        loadTime: result.loadTime
      }))
    };
  }),

  // ÊµãËØï7: ‰æøÊç∑ÂáΩÊï∞ÊµãËØï
  await runTest('‰æøÊç∑ÂáΩÊï∞ÊµãËØï', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    if (indexes.length === 0) {
      throw new Error('Ê≤°ÊúâÂèØÁî®ÁöÑÂàÜÁ±ªÁ¥¢Âºï');
    }
    
    const firstIndex = indexes[0];
    
    // ÊµãËØïÂçï‰∏™Âä†ËΩΩ‰æøÊç∑ÂáΩÊï∞
    const singleResult = await loadCategoryWithLazyLoader(firstIndex);
    
    // ÊµãËØïÊâπÈáèÂä†ËΩΩ‰æøÊç∑ÂáΩÊï∞
    const batchResult = await loadMultipleCategoriesWithLazyLoader([firstIndex]);
    
    // ÊµãËØïÁªüËÆ°ÂáΩÊï∞
    const stats = getLazyLoaderStats();
    
    return {
      singleLoad: {
        success: singleResult.success,
        fromCache: singleResult.fromCache
      },
      batchLoad: {
        size: batchResult.size,
        success: Array.from(batchResult.values())[0]?.success
      },
      stats: {
        cacheSize: stats.cacheSize,
        hasOptions: !!stats.options
      }
    };
  }),

  // ÊµãËØï8: ÁºìÂ≠òÊ∏ÖÁêÜÊµãËØï
  await runTest('ÁºìÂ≠òÊ∏ÖÁêÜÊµãËØï', async () => {
    const statsBefore = lazyLoader.getCacheStats();
    
    // Ê∏ÖÁêÜËøáÊúüÁºìÂ≠ò
    const cleanedCount = lazyLoader.cleanExpiredCache();
    
    // Ê∏ÖÁ©∫ÊâÄÊúâÁºìÂ≠ò
    lazyLoader.clearCache();
    
    const statsAfter = lazyLoader.getCacheStats();
    
    return {
      cacheSizeBefore: statsBefore.cacheSize,
      cleanedCount,
      cacheSizeAfter: statsAfter.cacheSize,
      clearWorking: statsAfter.cacheSize === 0
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LazyLoaderÁªÑ‰ª∂ÊµãËØï</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .header h1 {
      color: #2c3e50;
      margin: 0 0 10px 0;
    }
    
    .header .subtitle {
      color: #7f8c8d;
      font-size: 16px;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #dc3545;
    }
    
    .refresh-btn {
      background: #007bff;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 20px;
    }
    
    .refresh-btn:hover {
      background: #0056b3;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üß™ LazyLoaderÁªÑ‰ª∂ÊµãËØï</h1>
    <div class="subtitle">Week 3 - ‰ªªÂä°1.2È™åËØÅ | ÊµãËØïÊó∂Èó¥: {new Date().toLocaleString()}</div>
  </div>

  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : successRate === '0.0' ? 'error' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">ÊàêÂäüÁéá</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">ÊàêÂäüÊµãËØï</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">Â§±Ë¥•ÊµãËØï</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests}</div>
      <div class="label">ÊÄªÊµãËØïÊï∞</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '‚úÖ' : '‚ùå'}</span>
            ÊµãËØï {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>ÊµãËØïËØ¶ÊÉÖ:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>ÈîôËØØ‰ø°ÊÅØ:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <div style="text-align: center;">
    <button class="refresh-btn" onclick="window.location.reload()">
      üîÑ ÈáçÊñ∞ÊµãËØï
    </button>
  </div>

  <script define:vars={{ testResults }}>
    console.log('üß™ LazyLoaderÁªÑ‰ª∂ÊµãËØïÈ°µÈù¢Â∑≤Âä†ËΩΩ');
    console.log('üìä ÊµãËØïÁªìÊûú:', JSON.stringify(testResults, null, 2));
  </script>
</body>
</html>

---
/**
 * 错误处理测试页面
 * Week 3 - 任务2.3验证
 */

import ErrorMessage from '../../../components/ErrorMessage.astro';
import { ErrorHandler, ErrorType, ErrorSeverity } from '../../../utils/ErrorHandler';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => any): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 创建错误处理实例
const errorHandler = new ErrorHandler();

// 执行测试
const testResults: TestResult[] = [
  // 测试1: 错误处理器初始化
  await runTest('错误处理器初始化', () => {
    const stats = errorHandler.getErrorStats();
    const health = errorHandler.getSystemHealth();
    
    return {
      initialized: true,
      totalErrors: stats.totalErrors,
      systemStatus: health.status,
      systemScore: health.score
    };
  }),

  // 测试2: 网络错误处理
  await runTest('网络错误处理', async () => {
    const networkError = new Error('fetch failed');
    networkError.name = 'NetworkError';
    
    const result = await errorHandler.handleError(networkError, {
      type: 'network',
      operation: 'loadConfig'
    });
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      userMessage: result.error?.userMessage,
      retryable: result.error?.retryable,
      fallbackAvailable: result.error?.fallbackAvailable
    };
  }),

  // 测试3: 超时错误处理
  await runTest('超时错误处理', async () => {
    const timeoutError = new Error('Request timeout');
    timeoutError.name = 'TimeoutError';
    
    const result = await errorHandler.handleError(timeoutError, {
      type: 'network',
      operation: 'loadCategory'
    });
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      severity: result.error?.severity,
      userMessage: result.error?.userMessage,
      timeoutDetected: result.error?.type === ErrorType.TIMEOUT_ERROR
    };
  }),

  // 测试4: 数据解析错误处理
  await runTest('数据解析错误处理', async () => {
    const parseError = new SyntaxError('Unexpected token in JSON');
    
    const result = await errorHandler.handleError(parseError, {
      type: 'data',
      operation: 'parseConfig'
    });
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      parseErrorDetected: result.error?.type === ErrorType.PARSE_ERROR,
      fallbackAvailable: result.error?.fallbackAvailable,
      retryable: result.error?.retryable
    };
  }),

  // 测试5: 配置错误处理
  await runTest('配置错误处理', async () => {
    const configError = new Error('Config file not found');
    
    const result = await errorHandler.handleError(configError, {
      type: 'config',
      operation: 'loadConfig',
      path: '/config.json'
    });
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      configErrorDetected: result.error?.type === ErrorType.CONFIG_ERROR,
      severity: result.error?.severity,
      context: result.error?.context
    };
  }),

  // 测试6: 缓存错误处理
  await runTest('缓存错误处理', async () => {
    const cacheError = new Error('Cache corruption detected');
    
    const result = await errorHandler.handleError(cacheError, {
      type: 'cache',
      operation: 'cache',
      cacheKey: 'category-0'
    });
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      cacheErrorDetected: result.error?.type === ErrorType.CACHE_ERROR,
      severity: result.error?.severity,
      lowSeverity: result.error?.severity === ErrorSeverity.LOW
    };
  }),

  // 测试7: 预加载错误处理
  await runTest('预加载错误处理', async () => {
    const preloadError = new Error('Preload failed');
    
    const result = await errorHandler.handleError(preloadError, {
      type: 'preload',
      operation: 'preload',
      categoryIndex: 1
    });
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      preloadErrorDetected: result.error?.type === ErrorType.PRELOAD_ERROR,
      retryable: result.error?.retryable,
      fallbackAvailable: result.error?.fallbackAvailable
    };
  }),

  // 测试8: 存储错误处理
  await runTest('存储错误处理', async () => {
    const storageError = new Error('QuotaExceededError');
    storageError.name = 'QuotaExceededError';
    
    const result = await errorHandler.handleError(storageError);
    
    return {
      errorHandled: !result.success,
      errorType: result.error?.type,
      storageErrorDetected: result.error?.type === ErrorType.STORAGE_ERROR,
      userMessage: result.error?.userMessage,
      fallbackAvailable: result.error?.fallbackAvailable
    };
  }),

  // 测试9: 错误统计功能
  await runTest('错误统计功能', () => {
    const stats = errorHandler.getErrorStats();
    
    return {
      totalErrors: stats.totalErrors,
      hasErrorsByType: Object.keys(stats.errorsByType).length > 0,
      hasErrorsBySeverity: Object.keys(stats.errorsBySeverity).length > 0,
      hasRecentErrors: stats.recentErrors.length >= 0,
      statsWorking: stats.totalErrors >= 0
    };
  }),

  // 测试10: 系统健康检查
  await runTest('系统健康检查', () => {
    const health = errorHandler.getSystemHealth();
    
    return {
      status: health.status,
      score: health.score,
      issueCount: health.issues.length,
      recommendationCount: health.recommendations.length,
      healthCheckWorking: typeof health.score === 'number' && health.score >= 0
    };
  }),

  // 测试11: 错误日志管理
  await runTest('错误日志管理', () => {
    const logBefore = errorHandler.getErrorLog();
    const lengthBefore = logBefore.length;
    
    errorHandler.clearErrorLog();
    
    const logAfter = errorHandler.getErrorLog();
    const lengthAfter = logAfter.length;
    
    return {
      logLengthBefore: lengthBefore,
      logLengthAfter: lengthAfter,
      clearWorking: lengthAfter === 0,
      logManagementWorking: true
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);

// 获取最终统计
const finalStats = errorHandler.getErrorStats();
const finalHealth = errorHandler.getSystemHealth();
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>错误处理测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .demo-section {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .demo-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .demo-item {
      padding: 20px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #f9fafb;
    }
    
    .demo-controls {
      display: flex;
      gap: 10px;
      margin-top: 15px;
      flex-wrap: wrap;
    }
    
    .demo-controls button {
      padding: 8px 16px;
      border: 1px solid #d1d5db;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.2s ease;
    }
    
    .demo-controls button:hover {
      background: #f3f4f6;
      border-color: #9ca3af;
    }
    
    .demo-controls button.primary {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }
    
    .demo-controls button.danger {
      background: #ef4444;
      color: white;
      border-color: #ef4444;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #dc3545;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>🛡️ 错误处理测试</h1>
    <div class="subtitle">Week 3 - 任务2.3验证 | 测试时间: {new Date().toLocaleString()}</div>
  </div>

  <!-- 错误消息演示 -->
  <div class="demo-section">
    <h2>🚨 错误消息组件演示</h2>
    <div class="demo-grid">
      <div class="demo-item">
        <h4>网络错误 (高级)</h4>
        <ErrorMessage 
          type="NETWORK_ERROR"
          severity="high"
          message="网络连接不稳定，正在重试..."
          showRetry={true}
          showDetails={true}
          details="Error: fetch failed at line 123"
          dismissible={true}
        />
      </div>
      
      <div class="demo-item">
        <h4>配置错误 (严重)</h4>
        <ErrorMessage 
          type="CONFIG_ERROR"
          severity="critical"
          message="配置文件加载失败，已切换到备用配置"
          showRetry={true}
          dismissible={true}
        />
      </div>
      
      <div class="demo-item">
        <h4>缓存错误 (低级)</h4>
        <ErrorMessage 
          type="CACHE_ERROR"
          severity="low"
          message="缓存已清理，正在重新加载..."
          autoHide={5000}
          dismissible={true}
        />
      </div>
      
      <div class="demo-item">
        <h4>预加载错误 (中级)</h4>
        <ErrorMessage 
          type="PRELOAD_ERROR"
          severity="medium"
          message="预加载失败，不影响正常使用"
          showDetails={true}
          details="Preload timeout for category-2"
          dismissible={true}
        />
      </div>
    </div>
    
    <div class="demo-controls">
      <button onclick="triggerNetworkError()" class="danger">触发网络错误</button>
      <button onclick="triggerTimeoutError()" class="danger">触发超时错误</button>
      <button onclick="triggerParseError()" class="danger">触发解析错误</button>
      <button onclick="triggerConfigError()" class="danger">触发配置错误</button>
      <button onclick="showSuccessMessage()" class="primary">显示成功消息</button>
    </div>
  </div>

  <!-- 测试结果 -->
  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">测试通过率</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">通过测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{finalStats.totalErrors}</div>
      <div class="label">错误记录数</div>
    </div>
    <div class={`summary-item ${finalHealth.status === 'healthy' ? 'success' : 'warning'}`}>
      <div class="value">{finalHealth.score}</div>
      <div class="label">系统健康评分</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults, finalStats, finalHealth }}>
    console.log('🛡️ 错误处理测试页面已加载');
    console.log('📊 测试结果:', JSON.stringify(testResults, null, 2));
    console.log('📊 错误统计:', JSON.stringify(finalStats, null, 2));
    console.log('📊 系统健康:', JSON.stringify(finalHealth, null, 2));

    // 演示函数
    function triggerNetworkError() {
      console.log('🌐 触发网络错误演示');
      // 这里会显示网络错误消息
    }

    function triggerTimeoutError() {
      console.log('⏰ 触发超时错误演示');
      // 这里会显示超时错误消息
    }

    function triggerParseError() {
      console.log('🔧 触发解析错误演示');
      // 这里会显示解析错误消息
    }

    function triggerConfigError() {
      console.log('⚙️ 触发配置错误演示');
      // 这里会显示配置错误消息
    }

    function showSuccessMessage() {
      console.log('✅ 显示成功消息');
      // 这里会显示成功消息
    }

    // 使函数全局可用
    window.triggerNetworkError = triggerNetworkError;
    window.triggerTimeoutError = triggerTimeoutError;
    window.triggerParseError = triggerParseError;
    window.triggerConfigError = triggerConfigError;
    window.showSuccessMessage = showSuccessMessage;
  </script>
</body>
</html>

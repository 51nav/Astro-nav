---
/**
 * LoadingIndicator集成测试页面
 * Week 3 - 任务1.3集成验证
 * 测试LoadingIndicator与ConfigManager、LazyLoader的集成
 */

import LoadingIndicator from '../../../components/LoadingIndicator.astro';
import { 
  loadOptimizedConfig, 
  loadCategoryData, 
  getAllCategoryIndexes 
} from '../../../utils/ConfigManager';
import { LazyLoader } from '../../../utils/LazyLoader';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 执行集成测试
const testResults: TestResult[] = [
  // 测试1: 配置加载集成
  await runTest('配置加载集成', async () => {
    const result = await loadOptimizedConfig();
    return {
      configLoaded: result.success,
      isOptimized: result.isOptimized,
      loadTime: result.loadTime || 0,
      hasCategories: getAllCategoryIndexes().length > 0
    };
  }),

  // 测试2: 懒加载集成
  await runTest('懒加载集成', async () => {
    const indexes = getAllCategoryIndexes();
    if (indexes.length === 0) {
      throw new Error('没有可用的分类索引');
    }
    
    const lazyLoader = new LazyLoader();
    const result = await lazyLoader.loadCategory(indexes[0]);
    
    return {
      categoryLoaded: result.success,
      fromCache: result.fromCache,
      loadTime: result.loadTime,
      hasData: !!result.data
    };
  }),

  // 测试3: 加载状态模拟
  await runTest('加载状态模拟', async () => {
    // 模拟不同的加载状态
    const states = [
      { isLoading: true, type: 'spinner', message: '正在加载配置...' },
      { isLoading: true, type: 'progress', progress: 50, message: '加载进度 50%' },
      { isLoading: true, type: 'skeleton', message: '正在渲染内容...' },
      { isLoading: false }
    ];
    
    return {
      statesCount: states.length,
      allStatesValid: states.every(state => typeof state.isLoading === 'boolean'),
      typesSupported: ['spinner', 'progress', 'skeleton'],
      progressHandling: true
    };
  }),

  // 测试4: 错误状态处理
  await runTest('错误状态处理', async () => {
    try {
      // 尝试加载无效分类
      const result = await loadCategoryData(-1);
      return {
        errorHandled: !result.success,
        hasErrorMessage: !!result.error,
        errorType: 'invalid_category',
        gracefulDegradation: true
      };
    } catch (error) {
      return {
        errorHandled: true,
        hasErrorMessage: true,
        errorType: 'exception',
        gracefulDegradation: false
      };
    }
  }),

  // 测试5: 性能集成测试
  await runTest('性能集成测试', async () => {
    const startTime = performance.now();
    
    // 模拟完整的加载流程
    const configResult = await loadOptimizedConfig();
    const configTime = performance.now() - startTime;
    
    if (!configResult.success) {
      throw new Error('配置加载失败');
    }
    
    const indexes = getAllCategoryIndexes();
    const categoryStartTime = performance.now();
    const categoryResult = await loadCategoryData(indexes[0] || 0);
    const categoryTime = performance.now() - categoryStartTime;
    
    const totalTime = performance.now() - startTime;
    
    return {
      configLoadTime: configTime,
      categoryLoadTime: categoryTime,
      totalTime,
      performanceAcceptable: totalTime < 5000, // 5秒内完成
      configSuccess: configResult.success,
      categorySuccess: categoryResult.success
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LoadingIndicator集成测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .demo-section {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .demo-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .demo-item {
      padding: 20px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #f9fafb;
      text-align: center;
      min-height: 120px;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    
    .demo-controls {
      margin-top: 15px;
      display: flex;
      gap: 10px;
      justify-content: center;
    }
    
    .demo-controls button {
      padding: 8px 16px;
      border: 1px solid #d1d5db;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .demo-controls button:hover {
      background: #f3f4f6;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>🔗 LoadingIndicator集成测试</h1>
    <div class="subtitle">Week 3 - 任务1.3集成验证 | 测试时间: {new Date().toLocaleString()}</div>
  </div>

  <!-- 实际集成演示 -->
  <div class="demo-section">
    <h2>🎭 实际集成演示</h2>
    <div class="demo-grid">
      <!-- 配置加载演示 -->
      <div class="demo-item">
        <h4>配置加载状态</h4>
        <div id="config-demo">
          <LoadingIndicator 
            isLoading={true} 
            type="spinner" 
            size="medium" 
            message="正在加载配置..." 
          />
        </div>
        <div class="demo-controls">
          <button onclick="simulateConfigLoad()">模拟配置加载</button>
        </div>
      </div>

      <!-- 分类加载演示 -->
      <div class="demo-item">
        <h4>分类数据加载</h4>
        <div id="category-demo">
          <LoadingIndicator 
            isLoading={true} 
            type="progress" 
            size="medium" 
            progress={0}
            message="正在加载分类数据..." 
          />
        </div>
        <div class="demo-controls">
          <button onclick="simulateCategoryLoad()">模拟分类加载</button>
        </div>
      </div>

      <!-- 错误状态演示 -->
      <div class="demo-item">
        <h4>错误状态处理</h4>
        <div id="error-demo">
          <div style="color: #dc3545; padding: 20px;">
            ❌ 加载失败，请重试
          </div>
        </div>
        <div class="demo-controls">
          <button onclick="simulateError()">模拟错误</button>
          <button onclick="simulateRetry()">重试加载</button>
        </div>
      </div>

      <!-- 成功状态演示 -->
      <div class="demo-item">
        <h4>加载完成状态</h4>
        <div id="success-demo">
          <div style="color: #28a745; padding: 20px;">
            ✅ 加载完成！
            <br>
            <small>数据已成功加载并缓存</small>
          </div>
        </div>
        <div class="demo-controls">
          <button onclick="showSuccess()">显示成功状态</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 测试结果 -->
  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">集成测试通过率</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">通过测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">失败测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests}</div>
      <div class="label">总测试数</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            集成测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults }}>
    console.log('🔗 LoadingIndicator集成测试页面已加载');
    console.log('📊 集成测试结果:', JSON.stringify(testResults, null, 2));

    // 模拟配置加载
    function simulateConfigLoad() {
      const demo = document.getElementById('config-demo');
      demo.innerHTML = `
        <div class="loading-indicator loading-medium loading-spinner">
          <div class="loading-content">
            <div class="loading-spinner">
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
            </div>
            <div class="loading-message">正在加载配置...</div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        demo.innerHTML = '<div style="color: #28a745;">✅ 配置加载完成</div>';
      }, 2000);
    }

    // 模拟分类加载
    function simulateCategoryLoad() {
      const demo = document.getElementById('category-demo');
      let progress = 0;
      
      const interval = setInterval(() => {
        progress += 20;
        demo.innerHTML = `
          <div class="loading-indicator loading-medium loading-progress">
            <div class="loading-content">
              <div class="loading-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: ${progress}%"></div>
                </div>
                <div class="progress-text">${progress}%</div>
              </div>
              <div class="loading-message">正在加载分类数据...</div>
            </div>
          </div>
        `;
        
        if (progress >= 100) {
          clearInterval(interval);
          setTimeout(() => {
            demo.innerHTML = '<div style="color: #28a745;">✅ 分类数据加载完成</div>';
          }, 500);
        }
      }, 300);
    }

    // 模拟错误
    function simulateError() {
      const demo = document.getElementById('error-demo');
      demo.innerHTML = `
        <div class="loading-indicator loading-medium loading-spinner">
          <div class="loading-content">
            <div class="loading-spinner">
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
            </div>
            <div class="loading-message">正在加载...</div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        demo.innerHTML = '<div style="color: #dc3545; padding: 20px;">❌ 网络错误，加载失败</div>';
      }, 1500);
    }

    // 模拟重试
    function simulateRetry() {
      const demo = document.getElementById('error-demo');
      demo.innerHTML = `
        <div class="loading-indicator loading-medium loading-dots">
          <div class="loading-content">
            <div class="loading-dots">
              <div class="dot dot-1"></div>
              <div class="dot dot-2"></div>
              <div class="dot dot-3"></div>
            </div>
            <div class="loading-message">正在重试...</div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        demo.innerHTML = '<div style="color: #28a745; padding: 20px;">✅ 重试成功！</div>';
      }, 2000);
    }

    // 显示成功状态
    function showSuccess() {
      const demo = document.getElementById('success-demo');
      demo.innerHTML = `
        <div style="color: #28a745; padding: 20px; text-align: center;">
          <div style="font-size: 48px; margin-bottom: 10px;">✅</div>
          <div style="font-size: 18px; font-weight: bold;">加载完成！</div>
          <div style="font-size: 14px; opacity: 0.8; margin-top: 5px;">
            数据已成功加载并缓存<br>
            响应时间: 156ms
          </div>
        </div>
      `;
    }

    // 使函数全局可用
    window.simulateConfigLoad = simulateConfigLoad;
    window.simulateCategoryLoad = simulateCategoryLoad;
    window.simulateError = simulateError;
    window.simulateRetry = simulateRetry;
    window.showSuccess = showSuccess;
  </script>
</body>
</html>

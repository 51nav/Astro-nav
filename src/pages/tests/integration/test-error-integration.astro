---
/**
 * 错误处理集成测试页面
 * Week 3 - 任务2.3集成验证
 */

import ErrorMessage from '../../../components/ErrorMessage.astro';
import { ConfigManager } from '../../../utils/ConfigManager';
import { LazyLoader } from '../../../utils/LazyLoader';
import { PreloadStrategy } from '../../../utils/PreloadStrategy';
import { defaultErrorHandler } from '../../../utils/ErrorHandler';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 初始化组件
const configManager = new ConfigManager();
const lazyLoader = new LazyLoader(configManager);
const preloadStrategy = new PreloadStrategy(lazyLoader, configManager);

// 执行集成测试
const testResults: TestResult[] = [
  // 测试1: 配置加载错误处理
  await runTest('配置加载错误处理', async () => {
    // 尝试加载不存在的配置文件
    const invalidConfigManager = new ConfigManager('/invalid-config.json');
    const result = await invalidConfigManager.loadConfig();
    
    return {
      loadFailed: !result.success,
      hasErrorMessage: !!result.error,
      errorHandled: result.error !== undefined,
      gracefulDegradation: !result.success && result.error.length > 0
    };
  }),

  // 测试2: 分类加载错误处理
  await runTest('分类加载错误处理', async () => {
    // 首先加载正常配置
    const configResult = await configManager.loadConfig();
    
    if (!configResult.success) {
      throw new Error('配置加载失败，无法测试分类加载错误');
    }
    
    // 尝试加载不存在的分类
    const invalidCategoryResult = await lazyLoader.loadCategory(999);
    
    return {
      configLoaded: configResult.success,
      categoryLoadFailed: !invalidCategoryResult.success,
      hasErrorMessage: !!invalidCategoryResult.error,
      errorHandled: invalidCategoryResult.error !== undefined,
      fallbackWorking: !invalidCategoryResult.success
    };
  }),

  // 测试3: 预加载错误处理
  await runTest('预加载错误处理', async () => {
    // 确保配置已加载
    const configResult = await configManager.loadConfig();
    
    if (!configResult.success) {
      throw new Error('配置加载失败，无法测试预加载错误');
    }
    
    // 执行预加载（可能包含错误）
    const preloadResult = await preloadStrategy.executePreload();
    const preloadStats = preloadStrategy.getPreloadStats();
    
    return {
      configLoaded: configResult.success,
      preloadExecuted: true,
      preloadStats,
      hasFailures: preloadStats.failureCount > 0,
      errorHandling: preloadStats.failureCount === 0 || preloadStats.successCount > 0
    };
  }),

  // 测试4: 网络错误恢复
  await runTest('网络错误恢复', async () => {
    // 模拟网络错误
    const networkError = new Error('Network request failed');
    networkError.name = 'NetworkError';
    
    const errorResult = await defaultErrorHandler.handleError(networkError, {
      type: 'network',
      operation: 'loadCategory'
    });
    
    // 检查降级策略
    const hasNetworkFallback = !errorResult.success && errorResult.error?.fallbackAvailable;
    
    return {
      errorDetected: !errorResult.success,
      errorType: errorResult.error?.type,
      fallbackAvailable: errorResult.error?.fallbackAvailable,
      userFriendlyMessage: errorResult.error?.userMessage,
      networkErrorHandled: hasNetworkFallback
    };
  }),

  // 测试5: 缓存错误处理
  await runTest('缓存错误处理', async () => {
    // 获取缓存统计
    const cacheStatsBefore = lazyLoader.getCacheStats();
    
    // 模拟缓存错误
    const cacheError = new Error('Cache corruption detected');
    const errorResult = await defaultErrorHandler.handleError(cacheError, {
      type: 'cache',
      operation: 'cache'
    });
    
    // 清理缓存
    lazyLoader.clearCache();
    const cacheStatsAfter = lazyLoader.getCacheStats();
    
    return {
      cacheSizeBefore: cacheStatsBefore.cacheSize,
      cacheSizeAfter: cacheStatsAfter.cacheSize,
      cacheCleared: cacheStatsAfter.cacheSize === 0,
      errorHandled: !errorResult.success,
      fallbackAvailable: errorResult.error?.fallbackAvailable,
      cacheErrorRecovery: cacheStatsAfter.cacheSize === 0
    };
  }),

  // 测试6: 系统健康监控
  await runTest('系统健康监控', async () => {
    // 触发一些错误来测试健康监控
    const errors = [
      new Error('Test network error'),
      new Error('Test timeout'),
      new SyntaxError('Test parse error')
    ];
    
    for (const error of errors) {
      await defaultErrorHandler.handleError(error);
    }
    
    const health = defaultErrorHandler.getSystemHealth();
    const stats = defaultErrorHandler.getErrorStats();
    
    return {
      systemStatus: health.status,
      systemScore: health.score,
      totalErrors: stats.totalErrors,
      issueCount: health.issues.length,
      recommendationCount: health.recommendations.length,
      healthMonitoringWorking: health.score >= 0 && health.score <= 100
    };
  }),

  // 测试7: 错误恢复策略
  await runTest('错误恢复策略', async () => {
    // 测试不同类型错误的恢复策略
    const recoveryTests = [
      {
        type: 'config',
        error: new Error('Config load failed'),
        expectedFallback: true
      },
      {
        type: 'parse',
        error: new SyntaxError('JSON parse error'),
        expectedFallback: true
      },
      {
        type: 'preload',
        error: new Error('Preload failed'),
        expectedFallback: true
      }
    ];
    
    const recoveryResults = [];
    
    for (const test of recoveryTests) {
      const result = await defaultErrorHandler.handleError(test.error, {
        type: test.type,
        operation: 'test'
      });
      
      recoveryResults.push({
        type: test.type,
        errorHandled: !result.success,
        fallbackAvailable: result.error?.fallbackAvailable,
        expectedFallback: test.expectedFallback,
        recoveryWorking: result.error?.fallbackAvailable === test.expectedFallback
      });
    }
    
    return {
      recoveryTests: recoveryResults,
      allRecoveryWorking: recoveryResults.every(r => r.recoveryWorking),
      totalTests: recoveryResults.length
    };
  }),

  // 测试8: 用户体验优化
  await runTest('用户体验优化', async () => {
    // 测试用户友好的错误消息
    const userExperienceTests = [
      {
        error: new Error('fetch failed'),
        context: { type: 'network' },
        expectedMessage: '网络连接不稳定'
      },
      {
        error: new Error('timeout'),
        context: { type: 'timeout' },
        expectedMessage: '加载超时'
      },
      {
        error: new SyntaxError('JSON error'),
        context: { type: 'parse' },
        expectedMessage: '数据格式错误'
      }
    ];
    
    const userExperienceResults = [];
    
    for (const test of userExperienceTests) {
      const result = await defaultErrorHandler.handleError(test.error, test.context);
      
      userExperienceResults.push({
        errorType: result.error?.type,
        userMessage: result.error?.userMessage,
        isFriendly: result.error?.userMessage && 
                   result.error.userMessage.length > 0 && 
                   !result.error.userMessage.includes('Error:'),
        expectedKeyword: test.expectedMessage
      });
    }
    
    return {
      userExperienceTests: userExperienceResults,
      allFriendly: userExperienceResults.every(r => r.isFriendly),
      totalTests: userExperienceResults.length
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);

// 获取最终系统状态
const finalHealth = defaultErrorHandler.getSystemHealth();
const finalStats = defaultErrorHandler.getErrorStats();
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>错误处理集成测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .system-status {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .status-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8fafc;
      border: 1px solid #e2e8f0;
    }
    
    .status-item.healthy {
      background: #d1fae5;
      border-color: #10b981;
      color: #065f46;
    }
    
    .status-item.warning {
      background: #fef3c7;
      border-color: #f59e0b;
      color: #92400e;
    }
    
    .status-item.critical {
      background: #fee2e2;
      border-color: #ef4444;
      color: #991b1b;
    }
    
    .status-value {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .status-label {
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .error-showcase {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .showcase-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #dc3545;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>🛡️ 错误处理集成测试</h1>
    <div class="subtitle">Week 3 - 任务2.3集成验证 | 测试时间: {new Date().toLocaleString()}</div>
  </div>

  <!-- 系统状态仪表板 -->
  <div class="system-status">
    <h2>🏥 系统健康状态</h2>
    <div class="status-grid">
      <div class={`status-item ${finalHealth.status === 'healthy' ? 'healthy' : finalHealth.status === 'warning' ? 'warning' : 'critical'}`}>
        <div class="status-value">{finalHealth.status.toUpperCase()}</div>
        <div class="status-label">系统状态</div>
      </div>
      <div class={`status-item ${finalHealth.score >= 80 ? 'healthy' : finalHealth.score >= 60 ? 'warning' : 'critical'}`}>
        <div class="status-value">{finalHealth.score}</div>
        <div class="status-label">健康评分</div>
      </div>
      <div class="status-item">
        <div class="status-value">{finalStats.totalErrors}</div>
        <div class="status-label">错误记录</div>
      </div>
      <div class="status-item">
        <div class="status-value">{finalHealth.issues.length}</div>
        <div class="status-label">当前问题</div>
      </div>
      <div class="status-item">
        <div class="status-value">{finalHealth.recommendations.length}</div>
        <div class="status-label">优化建议</div>
      </div>
    </div>
  </div>

  <!-- 错误处理展示 -->
  <div class="error-showcase">
    <h2>🚨 错误处理展示</h2>
    <div class="showcase-grid">
      <ErrorMessage 
        type="NETWORK_ERROR"
        severity="high"
        message="网络连接不稳定，正在重试..."
        showRetry={true}
        showDetails={true}
        details="集成测试中检测到的网络错误"
        dismissible={true}
      />
      
      <ErrorMessage 
        type="CONFIG_ERROR"
        severity="critical"
        message="配置加载失败，已启用降级模式"
        showRetry={true}
        dismissible={true}
      />
    </div>
  </div>

  <!-- 测试结果 -->
  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">集成测试通过率</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">通过测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">失败测试</div>
    </div>
    <div class={`summary-item ${finalHealth.status === 'healthy' ? 'success' : 'warning'}`}>
      <div class="value">{finalHealth.status}</div>
      <div class="label">系统状态</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            集成测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults, finalHealth, finalStats }}>
    console.log('🛡️ 错误处理集成测试页面已加载');
    console.log('📊 集成测试结果:', JSON.stringify(testResults, null, 2));
    console.log('🏥 系统健康状态:', JSON.stringify(finalHealth, null, 2));
    console.log('📊 错误统计:', JSON.stringify(finalStats, null, 2));
  </script>
</body>
</html>

---
/**
 * 预加载策略集成测试页面
 * Week 3 - 任务2.1集成验证
 */

import { ConfigManager } from '../../../utils/ConfigManager';
import { LazyLoader } from '../../../utils/LazyLoader';
import { PreloadStrategy } from '../../../utils/PreloadStrategy';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 初始化组件
const configManager = new ConfigManager();
const lazyLoader = new LazyLoader(configManager);
const preloadStrategy = new PreloadStrategy(lazyLoader, configManager);

// 执行集成测试
const testResults: TestResult[] = [
  // 测试1: 完整预加载流程
  await runTest('完整预加载流程', async () => {
    // 1. 加载配置
    const configResult = await configManager.loadOptimizedConfig();
    if (!configResult.success) {
      throw new Error('配置加载失败');
    }
    
    // 2. 获取分类列表
    const categories = configManager.getAllCategoryIndexes();
    if (categories.length === 0) {
      throw new Error('没有可用的分类');
    }
    
    // 3. 模拟用户访问
    const firstCategory = categories[0];
    preloadStrategy.recordUserVisit(firstCategory, 150);
    
    // 4. 执行预加载
    await preloadStrategy.executePreload(firstCategory);
    
    // 5. 验证结果
    const stats = preloadStrategy.getPreloadStats();
    const cacheStats = lazyLoader.getCacheStats();
    
    return {
      configLoaded: configResult.success,
      categoryCount: categories.length,
      userVisitRecorded: stats.userHistorySize > 0,
      preloadExecuted: stats.totalPreloads > 0,
      cachePopulated: cacheStats.cacheSize > 0,
      preloadStats: stats
    };
  }),

  // 测试2: 热门分类预加载
  await runTest('热门分类预加载', async () => {
    const categories = configManager.getAllCategoryIndexes();
    const hotCategories = [0, 1, 2].filter(index => categories.includes(index));
    
    if (hotCategories.length === 0) {
      throw new Error('没有热门分类可测试');
    }
    
    // 清理缓存
    lazyLoader.clearCache();
    preloadStrategy.reset();
    
    // 执行预加载
    await preloadStrategy.executePreload();
    
    const stats = preloadStrategy.getPreloadStats();
    const cacheStats = lazyLoader.getCacheStats();
    
    return {
      hotCategories,
      preloadExecuted: stats.totalPreloads > 0,
      successfulPreloads: stats.successfulPreloads,
      cacheEntries: cacheStats.cacheEntries.map(entry => entry.categoryIndex),
      hotCategoriesPreloaded: hotCategories.some(hot => 
        cacheStats.cacheEntries.some(entry => entry.categoryIndex === hot)
      )
    };
  }),

  // 测试3: 相邻分类预加载
  await runTest('相邻分类预加载', async () => {
    const categories = configManager.getAllCategoryIndexes();
    if (categories.length < 3) {
      return { skipped: true, reason: '需要至少3个分类' };
    }
    
    // 选择中间的分类
    const currentCategory = categories[1];
    const expectedAdjacent = [categories[0], categories[2]];
    
    // 清理缓存
    lazyLoader.clearCache();
    preloadStrategy.reset();
    
    // 执行预加载
    await preloadStrategy.executePreload(currentCategory);
    
    const cacheStats = lazyLoader.getCacheStats();
    const cachedCategories = cacheStats.cacheEntries.map(entry => entry.categoryIndex);
    
    return {
      currentCategory,
      expectedAdjacent,
      cachedCategories,
      adjacentPreloaded: expectedAdjacent.some(adj => cachedCategories.includes(adj)),
      cacheSize: cacheStats.cacheSize
    };
  }),

  // 测试4: 用户历史预加载
  await runTest('用户历史预加载', async () => {
    const categories = configManager.getAllCategoryIndexes();
    if (categories.length < 2) {
      return { skipped: true, reason: '需要至少2个分类' };
    }
    
    // 清理状态
    lazyLoader.clearCache();
    preloadStrategy.reset();
    
    // 模拟用户历史访问
    const historyCategory = categories[categories.length - 1]; // 选择最后一个分类
    preloadStrategy.recordUserVisit(historyCategory, 100);
    preloadStrategy.recordUserVisit(historyCategory, 120); // 多次访问增加权重
    preloadStrategy.recordUserVisit(historyCategory, 90);
    
    // 从不同分类执行预加载
    const currentCategory = categories[0];
    await preloadStrategy.executePreload(currentCategory);
    
    const stats = preloadStrategy.getPreloadStats();
    const cacheStats = lazyLoader.getCacheStats();
    
    return {
      historyCategory,
      currentCategory,
      userHistorySize: stats.userHistorySize,
      preloadExecuted: stats.totalPreloads > 0,
      historyCategoryPreloaded: cacheStats.cacheEntries.some(
        entry => entry.categoryIndex === historyCategory
      )
    };
  }),

  // 测试5: 预加载性能测试
  await runTest('预加载性能测试', async () => {
    const categories = configManager.getAllCategoryIndexes();
    
    // 清理状态
    lazyLoader.clearCache();
    preloadStrategy.reset();
    
    // 执行多轮预加载测试
    const performanceResults = [];
    
    for (let i = 0; i < 3; i++) {
      const startTime = performance.now();
      await preloadStrategy.executePreload(categories[i % categories.length]);
      const duration = performance.now() - startTime;
      performanceResults.push(duration);
    }
    
    const stats = preloadStrategy.getPreloadStats();
    const avgDuration = performanceResults.reduce((sum, time) => sum + time, 0) / performanceResults.length;
    
    return {
      performanceResults,
      avgDuration,
      totalPreloads: stats.totalPreloads,
      successRate: stats.successRate,
      avgPreloadTime: stats.avgPreloadTime,
      performanceAcceptable: avgDuration < 2000 // 2秒内完成
    };
  }),

  // 测试6: 缓存命中率测试
  await runTest('缓存命中率测试', async () => {
    const categories = configManager.getAllCategoryIndexes();
    
    // 清理状态
    lazyLoader.clearCache();
    preloadStrategy.reset();
    
    // 第一轮：预加载
    await preloadStrategy.executePreload(categories[0]);
    
    const statsAfterPreload = preloadStrategy.getPreloadStats();
    
    // 第二轮：再次预加载相同内容
    await preloadStrategy.executePreload(categories[0]);
    
    const statsAfterSecond = preloadStrategy.getPreloadStats();
    
    const cacheHitRate = statsAfterSecond.cacheHitRate;
    
    return {
      firstRoundPreloads: statsAfterPreload.totalPreloads,
      secondRoundPreloads: statsAfterSecond.totalPreloads,
      cacheHits: statsAfterSecond.cacheHits,
      cacheHitRate,
      cacheHitRateGood: cacheHitRate > 50 // 缓存命中率大于50%
    };
  }),

  // 测试7: 错误处理测试
  await runTest('错误处理测试', async () => {
    // 测试无效分类索引
    const invalidCategory = -1;
    
    try {
      await preloadStrategy.executePreload(invalidCategory);
      
      const stats = preloadStrategy.getPreloadStats();
      
      return {
        errorHandled: true,
        preloadAttempted: stats.totalPreloads >= 0,
        systemStable: true
      };
    } catch (error) {
      return {
        errorHandled: false,
        error: error instanceof Error ? error.message : '未知错误',
        systemStable: false
      };
    }
  }),

  // 测试8: 内存效率测试
  await runTest('内存效率测试', async () => {
    const categories = configManager.getAllCategoryIndexes();
    
    // 执行大量预加载操作
    for (let i = 0; i < Math.min(10, categories.length * 2); i++) {
      await preloadStrategy.executePreload(categories[i % categories.length]);
    }
    
    const stats = preloadStrategy.getPreloadStats();
    const cacheStats = lazyLoader.getCacheStats();
    
    return {
      totalOperations: Math.min(10, categories.length * 2),
      finalCacheSize: cacheStats.cacheSize,
      maxCacheSize: cacheStats.maxCacheSize,
      userHistorySize: stats.userHistorySize,
      memoryEfficient: cacheStats.cacheSize <= cacheStats.maxCacheSize,
      noMemoryLeak: stats.currentlyPreloading === 0
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);

// 计算总体性能评分
const performanceTests = testResults.filter(r => 
  r.name.includes('性能') || r.name.includes('缓存') || r.name.includes('内存')
);
const performanceScore = performanceTests.filter(r => r.success).length / performanceTests.length * 100;
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>预加载策略集成测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #dc3545;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>🔗 预加载策略集成测试</h1>
    <div class="subtitle">Week 3 - 任务2.1集成验证 | 测试时间: {new Date().toLocaleString()}</div>
  </div>

  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">集成测试通过率</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">通过测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">失败测试</div>
    </div>
    <div class={`summary-item ${performanceScore >= 80 ? 'success' : 'warning'}`}>
      <div class="value">{performanceScore.toFixed(0)}%</div>
      <div class="label">性能评分</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            集成测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults }}>
    console.log('🔗 预加载策略集成测试页面已加载');
    console.log('📊 集成测试结果:', JSON.stringify(testResults, null, 2));
  </script>
</body>
</html>

---
/**
 * 性能监控集成测试页面
 * Week 3 - 任务2.2集成验证
 */

import PerformanceMonitor from '../../../components/PerformanceMonitor.astro';
import { ConfigManager } from '../../../utils/ConfigManager';
import { LazyLoader } from '../../../utils/LazyLoader';
import { PreloadStrategy } from '../../../utils/PreloadStrategy';
import { PerformanceMonitor as PerformanceMonitorClass } from '../../../utils/PerformanceMonitor';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 初始化组件
const configManager = new ConfigManager();
const lazyLoader = new LazyLoader(configManager);
const preloadStrategy = new PreloadStrategy(lazyLoader, configManager);
const performanceMonitor = new PerformanceMonitorClass();

// 执行集成测试
const testResults: TestResult[] = [
  // 测试1: 完整性能监控流程
  await runTest('完整性能监控流程', async () => {
    // 1. 监控配置加载
    const configStartTime = performance.now();
    const configResult = await configManager.loadOptimizedConfig();
    const configLoadTime = performance.now() - configStartTime;
    
    performanceMonitor.recordConfigLoadTime(configLoadTime);
    
    // 2. 监控分类加载
    if (configResult.success) {
      const categories = configManager.getAllCategoryIndexes();
      if (categories.length > 0) {
        const categoryStartTime = performance.now();
        const categoryResult = await lazyLoader.loadCategory(categories[0]);
        const categoryLoadTime = performance.now() - categoryStartTime;
        
        performanceMonitor.recordCategoryLoadTime(categoryLoadTime);
        performanceMonitor.recordNetworkRequest(categoryLoadTime, categoryResult.success);
      }
    }
    
    // 3. 监控预加载
    await preloadStrategy.executePreload();
    const preloadStats = preloadStrategy.getPreloadStats();
    performanceMonitor.updatePreloadMetrics(
      preloadStats.totalPreloads,
      preloadStats.successRate,
      preloadStats.cacheHitRate
    );
    
    // 4. 监控缓存
    const cacheStats = lazyLoader.getCacheStats();
    performanceMonitor.updateCacheMetrics(
      cacheStats.cacheSize,
      cacheStats.maxCacheSize,
      cacheStats.hitRate
    );
    
    const metrics = performanceMonitor.getMetrics();
    const score = performanceMonitor.getPerformanceScore();
    
    return {
      configLoaded: configResult.success,
      configLoadTime,
      categoryLoadTime: metrics.categoryLoadTime,
      preloadCount: metrics.preloadCount,
      cacheSize: metrics.cacheSize,
      performanceScore: score,
      monitoringWorking: metrics.configLoadTime > 0 && score > 0
    };
  }),

  // 测试2: 实时性能监控
  await runTest('实时性能监控', async () => {
    const categories = configManager.getAllCategoryIndexes();
    const monitoringResults = [];
    
    // 模拟多次操作并监控
    for (let i = 0; i < 5; i++) {
      const startTime = performance.now();
      
      // 模拟用户交互
      const interactionTime = Math.random() * 50 + 20;
      performanceMonitor.recordUserInteraction(interactionTime);
      
      // 模拟分类加载
      if (categories.length > 0) {
        const categoryIndex = categories[i % categories.length];
        const result = await lazyLoader.loadCategory(categoryIndex);
        const loadTime = performance.now() - startTime;
        
        performanceMonitor.recordCategoryLoadTime(loadTime);
        performanceMonitor.recordNetworkRequest(loadTime, result.success);
        
        monitoringResults.push({
          iteration: i + 1,
          categoryIndex,
          loadTime,
          success: result.success,
          interactionTime
        });
      }
    }
    
    const metrics = performanceMonitor.getMetrics();
    
    return {
      iterations: monitoringResults.length,
      results: monitoringResults,
      totalInteractions: metrics.userInteractionCount,
      avgInteractionTime: metrics.avgInteractionResponseTime,
      totalNetworkRequests: metrics.networkRequestCount,
      avgResponseTime: metrics.avgResponseTime,
      realTimeMonitoringWorking: monitoringResults.length > 0 && metrics.userInteractionCount > 0
    };
  }),

  // 测试3: 性能警告系统
  await runTest('性能警告系统', async () => {
    // 清理之前的警告
    performanceMonitor.reset();
    
    // 触发各种警告条件
    const warningTriggers = [
      { action: 'slowConfig', value: 1200 },
      { action: 'slowCategory', value: 2200 },
      { action: 'lowCacheHit', value: 45 },
      { action: 'slowNetwork', value: 1800 },
      { action: 'slowInteraction', value: 150 }
    ];
    
    for (const trigger of warningTriggers) {
      switch (trigger.action) {
        case 'slowConfig':
          performanceMonitor.recordConfigLoadTime(trigger.value);
          break;
        case 'slowCategory':
          performanceMonitor.recordCategoryLoadTime(trigger.value);
          break;
        case 'lowCacheHit':
          performanceMonitor.updateCacheMetrics(3, 10, trigger.value);
          break;
        case 'slowNetwork':
          performanceMonitor.recordNetworkRequest(trigger.value, true);
          break;
        case 'slowInteraction':
          performanceMonitor.recordUserInteraction(trigger.value);
          break;
      }
    }
    
    const alerts = performanceMonitor.getAlerts();
    const recommendations = performanceMonitor.getRecommendations();
    
    return {
      warningTriggers,
      alertCount: alerts.length,
      recommendationCount: recommendations.length,
      alertTypes: [...new Set(alerts.map(a => a.type))],
      alertMetrics: [...new Set(alerts.map(a => a.metric))],
      recommendationCategories: [...new Set(recommendations.map(r => r.category))],
      warningSystemWorking: alerts.length > 0 && recommendations.length > 0
    };
  }),

  // 测试4: 性能优化建议
  await runTest('性能优化建议', async () => {
    // 创建不同的性能场景
    const scenarios = [
      {
        name: 'optimal',
        config: { configTime: 200, categoryTime: 50, cacheHit: 95, networkTime: 100 }
      },
      {
        name: 'suboptimal',
        config: { configTime: 800, categoryTime: 300, cacheHit: 70, networkTime: 800 }
      },
      {
        name: 'poor',
        config: { configTime: 1500, categoryTime: 2000, cacheHit: 40, networkTime: 2000 }
      }
    ];
    
    const scenarioResults = [];
    
    for (const scenario of scenarios) {
      const testMonitor = new PerformanceMonitorClass();
      
      testMonitor.recordConfigLoadTime(scenario.config.configTime);
      testMonitor.recordCategoryLoadTime(scenario.config.categoryTime);
      testMonitor.updateCacheMetrics(5, 10, scenario.config.cacheHit);
      testMonitor.recordNetworkRequest(scenario.config.networkTime, true);
      
      const score = testMonitor.getPerformanceScore();
      const recommendations = testMonitor.getRecommendations();
      
      scenarioResults.push({
        scenario: scenario.name,
        score,
        recommendationCount: recommendations.length,
        recommendations: recommendations.map(r => ({
          category: r.category,
          impact: r.impact,
          actionable: r.actionable
        }))
      });
    }
    
    return {
      scenarios: scenarioResults,
      optimalScore: scenarioResults[0].score,
      poorScore: scenarioResults[2].score,
      scoreVariation: scenarioResults[0].score - scenarioResults[2].score,
      recommendationSystemWorking: scenarioResults.every(s => 
        s.scenario === 'optimal' ? s.recommendationCount <= 1 : s.recommendationCount > 0
      )
    };
  }),

  // 测试5: 内存监控集成
  await runTest('内存监控集成', async () => {
    // 执行一系列操作来测试内存监控
    const operations = [];
    
    for (let i = 0; i < 10; i++) {
      // 加载分类数据
      const categories = configManager.getAllCategoryIndexes();
      if (categories.length > 0) {
        await lazyLoader.loadCategory(categories[i % categories.length]);
      }
      
      // 执行预加载
      await preloadStrategy.executePreload();
      
      // 记录内存使用情况
      const metrics = performanceMonitor.getMetrics();
      operations.push({
        iteration: i + 1,
        memoryUsage: metrics.memoryUsage,
        cacheSize: lazyLoader.getCacheStats().cacheSize
      });
    }
    
    const finalMetrics = performanceMonitor.getMetrics();
    
    return {
      operations: operations.length,
      finalMemoryUsage: finalMetrics.memoryUsage,
      finalCacheSize: lazyLoader.getCacheStats().cacheSize,
      memoryEfficient: finalMetrics.memoryUsage < 50, // 小于50MB
      memoryMonitoringWorking: operations.length > 0
    };
  }),

  // 测试6: 性能数据导出
  await runTest('性能数据导出', async () => {
    // 生成一些性能数据
    performanceMonitor.recordConfigLoadTime(300);
    performanceMonitor.recordCategoryLoadTime(150);
    performanceMonitor.recordUserInteraction(45);
    performanceMonitor.recordNetworkRequest(200, true);
    
    const exportData = performanceMonitor.exportReport();
    
    let parsedData;
    try {
      parsedData = JSON.parse(exportData);
    } catch (error) {
      throw new Error('导出数据格式错误');
    }
    
    return {
      exportSize: exportData.length,
      hasMetrics: !!parsedData.metrics,
      hasAlerts: Array.isArray(parsedData.alerts),
      hasRecommendations: Array.isArray(parsedData.recommendations),
      hasScore: typeof parsedData.score === 'number',
      hasExportTime: !!parsedData.exportTime,
      metricsComplete: !!(parsedData.metrics.configLoadTime && 
                         parsedData.metrics.categoryLoadTime &&
                         parsedData.metrics.userInteractionCount),
      exportWorking: exportData.length > 0 && !!parsedData.metrics
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);

// 计算性能评分
const performanceScore = performanceMonitor.getPerformanceScore();
const finalMetrics = performanceMonitor.getMetrics();
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>性能监控集成测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .performance-dashboard {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .dashboard-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8fafc;
      border: 1px solid #e2e8f0;
    }
    
    .dashboard-item.excellent {
      background: #d1fae5;
      border-color: #10b981;
    }
    
    .dashboard-item.good {
      background: #dbeafe;
      border-color: #3b82f6;
    }
    
    .dashboard-item.warning {
      background: #fef3c7;
      border-color: #f59e0b;
    }
    
    .dashboard-item.poor {
      background: #fee2e2;
      border-color: #ef4444;
    }
    
    .dashboard-value {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .dashboard-label {
      font-size: 12px;
      color: #6b7280;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .summary {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .summary-item {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    
    .summary-item.success {
      background: #d4edda;
      color: #155724;
    }
    
    .summary-item.warning {
      background: #fff3cd;
      color: #856404;
    }
    
    .summary-item .value {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .summary-item .label {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: #d4edda;
      color: #155724;
    }
    
    .test-header.error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .test-name {
      font-size: 18px;
      font-weight: 600;
    }
    
    .test-duration {
      font-size: 14px;
      opacity: 0.8;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 14px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #dc3545;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>📊 性能监控集成测试</h1>
    <div class="subtitle">Week 3 - 任务2.2集成验证 | 测试时间: {new Date().toLocaleString()}</div>
  </div>

  <!-- 性能仪表板 -->
  <div class="performance-dashboard">
    <h2>🎛️ 实时性能仪表板</h2>
    <div class="dashboard-grid">
      <div class={`dashboard-item ${performanceScore >= 90 ? 'excellent' : performanceScore >= 70 ? 'good' : performanceScore >= 50 ? 'warning' : 'poor'}`}>
        <div class="dashboard-value">{performanceScore}</div>
        <div class="dashboard-label">性能评分</div>
      </div>
      <div class={`dashboard-item ${finalMetrics.configLoadTime <= 500 ? 'excellent' : finalMetrics.configLoadTime <= 1000 ? 'good' : 'warning'}`}>
        <div class="dashboard-value">{finalMetrics.configLoadTime.toFixed(0)}ms</div>
        <div class="dashboard-label">配置加载时间</div>
      </div>
      <div class={`dashboard-item ${finalMetrics.avgCategoryLoadTime <= 100 ? 'excellent' : finalMetrics.avgCategoryLoadTime <= 300 ? 'good' : 'warning'}`}>
        <div class="dashboard-value">{finalMetrics.avgCategoryLoadTime.toFixed(0)}ms</div>
        <div class="dashboard-label">平均分类加载</div>
      </div>
      <div class={`dashboard-item ${finalMetrics.cacheHitRate >= 90 ? 'excellent' : finalMetrics.cacheHitRate >= 70 ? 'good' : 'warning'}`}>
        <div class="dashboard-value">{finalMetrics.cacheHitRate.toFixed(1)}%</div>
        <div class="dashboard-label">缓存命中率</div>
      </div>
      <div class={`dashboard-item ${finalMetrics.memoryUsage <= 30 ? 'excellent' : finalMetrics.memoryUsage <= 50 ? 'good' : 'warning'}`}>
        <div class="dashboard-value">{finalMetrics.memoryUsage.toFixed(1)}MB</div>
        <div class="dashboard-label">内存使用</div>
      </div>
      <div class="dashboard-item good">
        <div class="dashboard-value">{finalMetrics.networkRequestCount}</div>
        <div class="dashboard-label">网络请求数</div>
      </div>
    </div>
  </div>

  <!-- 性能监控面板 -->
  <PerformanceMonitor 
    visible={true}
    position="bottom-right"
    collapsible={true}
    defaultCollapsed={false}
    updateInterval={2000}
  />

  <!-- 测试结果 -->
  <div class="summary">
    <div class={`summary-item ${successRate === '100.0' ? 'success' : 'warning'}`}>
      <div class="value">{successRate}%</div>
      <div class="label">集成测试通过率</div>
    </div>
    <div class="summary-item">
      <div class="value">{successCount}</div>
      <div class="label">通过测试</div>
    </div>
    <div class="summary-item">
      <div class="value">{totalTests - successCount}</div>
      <div class="label">失败测试</div>
    </div>
    <div class={`summary-item ${performanceScore >= 80 ? 'success' : 'warning'}`}>
      <div class="value">{performanceScore}</div>
      <div class="label">性能评分</div>
    </div>
  </div>

  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            集成测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults, performanceScore, finalMetrics }}>
    console.log('📊 性能监控集成测试页面已加载');
    console.log('📊 集成测试结果:', JSON.stringify(testResults, null, 2));
    console.log('📊 最终性能评分:', performanceScore);
    console.log('📊 最终性能指标:', JSON.stringify(finalMetrics, null, 2));
  </script>
</body>
</html>

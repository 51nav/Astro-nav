---
/**
 * Week 3 基础集成测试页面
 * 任务1.4: 综合测试ConfigManager、LazyLoader、LoadingIndicator的集成
 */

import LoadingIndicator from '../components/LoadingIndicator.astro';
import { ConfigManager } from '../utils/ConfigManager';
import { LazyLoader } from '../utils/LazyLoader';

// 测试结果接口
interface TestResult {
  name: string;
  success: boolean;
  duration: number;
  details: any;
  error?: string;
}

interface PerformanceMetrics {
  configLoadTime: number;
  categoryLoadTime: number;
  cacheHitTime: number;
  totalTestTime: number;
}

async function runTest(name: string, testFn: () => Promise<any>): Promise<TestResult> {
  const startTime = performance.now();
  try {
    const result = await testFn();
    return {
      name,
      success: true,
      duration: performance.now() - startTime,
      details: result
    };
  } catch (error) {
    return {
      name,
      success: false,
      duration: performance.now() - startTime,
      details: {},
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

// 初始化组件
const configManager = new ConfigManager();
const lazyLoader = new LazyLoader(configManager);

// 性能指标收集
const performanceMetrics: PerformanceMetrics = {
  configLoadTime: 0,
  categoryLoadTime: 0,
  cacheHitTime: 0,
  totalTestTime: 0
};

const totalStartTime = performance.now();

// 执行综合集成测试
const testResults: TestResult[] = [
  // 测试1: 优化格式检测
  await runTest('优化格式检测', async () => {
    const startTime = performance.now();
    const result = await configManager.loadOptimizedConfig();
    performanceMetrics.configLoadTime = performance.now() - startTime;
    
    return {
      success: result.success,
      isOptimized: result.isOptimized,
      loadTime: performanceMetrics.configLoadTime,
      hasConfig: !!result.config,
      categoryCount: result.config?.optimization?.totalCategories || 0,
      compressionRatio: result.config?.optimization?.compressionRatio || 0
    };
  }),

  // 测试2: 分类数据懒加载
  await runTest('分类数据懒加载', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    if (indexes.length === 0) {
      throw new Error('没有可用的分类索引');
    }
    
    const testIndex = indexes[0];
    const startTime = performance.now();
    const result = await lazyLoader.loadCategory(testIndex);
    performanceMetrics.categoryLoadTime = performance.now() - startTime;
    
    return {
      categoryIndex: testIndex,
      success: result.success,
      fromCache: result.fromCache,
      loadTime: performanceMetrics.categoryLoadTime,
      hasData: !!result.data,
      siteCount: result.data?.sites?.length || 0,
      categoryName: result.data?.categoryName || ''
    };
  }),

  // 测试3: 缓存机制验证
  await runTest('缓存机制验证', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    const testIndex = indexes[0];
    
    // 第二次加载同一分类 (应该从缓存获取)
    const startTime = performance.now();
    const result = await lazyLoader.loadCategory(testIndex);
    performanceMetrics.cacheHitTime = performance.now() - startTime;
    
    const stats = lazyLoader.getCacheStats();
    
    return {
      fromCache: result.fromCache,
      cacheHitTime: performanceMetrics.cacheHitTime,
      cacheSize: stats.cacheSize,
      cacheWorking: result.fromCache && performanceMetrics.cacheHitTime < 10, // 缓存应该很快
      cacheStats: stats
    };
  }),

  // 测试4: 错误处理测试
  await runTest('错误处理测试', async () => {
    // 测试无效分类索引
    const invalidResult = await lazyLoader.loadCategory(-1);
    
    // 测试空配置情况
    const emptyConfigManager = new ConfigManager();
    const emptyResult = await emptyConfigManager.loadCategoryData(0);
    
    return {
      invalidIndexHandled: !invalidResult.success,
      invalidIndexError: invalidResult.error,
      emptyConfigHandled: !emptyResult.success,
      emptyConfigError: emptyResult.error,
      gracefulDegradation: true
    };
  }),

  // 测试5: 批量加载性能
  await runTest('批量加载性能', async () => {
    const indexes = configManager.getAllCategoryIndexes();
    const testIndexes = indexes.slice(0, Math.min(3, indexes.length));
    
    const startTime = performance.now();
    const results = await lazyLoader.loadMultipleCategories(testIndexes);
    const batchLoadTime = performance.now() - startTime;
    
    const successCount = Array.from(results.values()).filter(r => r.success).length;
    
    return {
      requestedCount: testIndexes.length,
      successCount,
      batchLoadTime,
      avgTimePerCategory: batchLoadTime / testIndexes.length,
      allSuccessful: successCount === testIndexes.length,
      results: Array.from(results.entries()).map(([index, result]) => ({
        categoryIndex: index,
        success: result.success,
        fromCache: result.fromCache
      }))
    };
  }),

  // 测试6: 内存使用监控
  await runTest('内存使用监控', async () => {
    const stats = lazyLoader.getCacheStats();
    
    // 清理过期缓存测试
    const cleanedCount = lazyLoader.cleanExpiredCache();
    
    // 获取配置管理器状态
    const configInfo = {
      isOptimized: configManager.isOptimizedMode(),
      categoryCount: configManager.getAllCategoryIndexes().length,
      hasConfig: configManager.hasConfig()
    };
    
    return {
      cacheStats: stats,
      cleanedCacheCount: cleanedCount,
      configManagerState: configInfo,
      memoryEfficient: stats.cacheSize <= 10, // 缓存大小控制
      performanceOptimal: true
    };
  }),

  // 测试7: 端到端用户体验
  await runTest('端到端用户体验', async () => {
    // 模拟完整的用户操作流程
    const userFlow = {
      step1: '加载配置',
      step2: '选择分类',
      step3: '加载数据',
      step4: '缓存验证',
      step5: '切换分类'
    };
    
    // 1. 配置加载
    const configResult = await configManager.loadOptimizedConfig();
    
    // 2. 获取分类列表
    const categories = configManager.getAllCategoryIndexes();
    
    // 3. 加载第一个分类
    const firstResult = categories.length > 0 ? 
      await lazyLoader.loadCategory(categories[0]) : null;
    
    // 4. 切换到第二个分类
    const secondResult = categories.length > 1 ? 
      await lazyLoader.loadCategory(categories[1]) : null;
    
    return {
      userFlow,
      configLoaded: configResult.success,
      categoriesAvailable: categories.length,
      firstCategoryLoaded: firstResult?.success || false,
      secondCategoryLoaded: secondResult?.success || false,
      userExperienceSmooth: configResult.success && categories.length > 0,
      totalSteps: Object.keys(userFlow).length,
      completedSteps: [
        configResult.success,
        categories.length > 0,
        firstResult?.success,
        secondResult?.success
      ].filter(Boolean).length
    };
  }),

  // 测试8: 性能基准验证
  await runTest('性能基准验证', async () => {
    const benchmarks = {
      configLoadTime: performanceMetrics.configLoadTime,
      categoryLoadTime: performanceMetrics.categoryLoadTime,
      cacheHitTime: performanceMetrics.cacheHitTime,
      totalTestTime: performance.now() - totalStartTime
    };
    
    // 性能基准检查
    const benchmarkResults = {
      configLoadFast: benchmarks.configLoadTime < 1000, // 配置加载 < 1秒
      categoryLoadFast: benchmarks.categoryLoadTime < 2000, // 分类加载 < 2秒
      cacheHitFast: benchmarks.cacheHitTime < 10, // 缓存命中 < 10ms
      totalTimeFast: benchmarks.totalTestTime < 10000 // 总测试时间 < 10秒
    };
    
    performanceMetrics.totalTestTime = benchmarks.totalTestTime;
    
    return {
      benchmarks,
      benchmarkResults,
      allBenchmarksPassed: Object.values(benchmarkResults).every(Boolean),
      performanceGrade: Object.values(benchmarkResults).filter(Boolean).length >= 3 ? 'A' : 'B'
    };
  })
];

const successCount = testResults.filter(r => r.success).length;
const totalTests = testResults.length;
const successRate = (successCount / totalTests * 100).toFixed(1);

// 计算总体性能评分
const performanceScore = Math.round(
  (performanceMetrics.configLoadTime < 1000 ? 25 : 0) +
  (performanceMetrics.categoryLoadTime < 2000 ? 25 : 0) +
  (performanceMetrics.cacheHitTime < 10 ? 25 : 0) +
  (parseFloat(successRate) >= 90 ? 25 : 0)
);
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Week 3 基础集成测试</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
      line-height: 1.6;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 40px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .header h1 {
      margin: 0 0 10px 0;
      font-size: 2.5em;
      font-weight: 700;
    }
    
    .header .subtitle {
      font-size: 1.2em;
      opacity: 0.9;
    }
    
    .dashboard {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .metric-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      text-align: center;
      border-left: 4px solid #3b82f6;
    }
    
    .metric-card.success {
      border-left-color: #10b981;
    }
    
    .metric-card.warning {
      border-left-color: #f59e0b;
    }
    
    .metric-card.error {
      border-left-color: #ef4444;
    }
    
    .metric-value {
      font-size: 2.5em;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .metric-label {
      color: #6b7280;
      font-size: 0.9em;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .performance-panel {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .performance-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .performance-item {
      text-align: center;
      padding: 20px;
      background: #f8fafc;
      border-radius: 8px;
    }
    
    .performance-time {
      font-size: 1.8em;
      font-weight: bold;
      color: #3b82f6;
    }
    
    .performance-desc {
      color: #6b7280;
      font-size: 0.9em;
      margin-top: 5px;
    }
    
    .test-results {
      display: grid;
      gap: 20px;
    }
    
    .test-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
      transition: transform 0.2s ease;
    }
    
    .test-card:hover {
      transform: translateY(-2px);
    }
    
    .test-header {
      padding: 20px;
      border-bottom: 1px solid #e5e7eb;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .test-header.success {
      background: linear-gradient(135deg, #d1fae5, #a7f3d0);
      color: #065f46;
    }
    
    .test-header.error {
      background: linear-gradient(135deg, #fee2e2, #fecaca);
      color: #991b1b;
    }
    
    .test-name {
      font-size: 1.2em;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .test-duration {
      font-size: 0.9em;
      opacity: 0.8;
      background: rgba(255,255,255,0.2);
      padding: 4px 8px;
      border-radius: 4px;
    }
    
    .test-content {
      padding: 20px;
    }
    
    .test-details {
      background: #f8fafc;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }
    
    .test-details pre {
      margin: 0;
      font-size: 0.85em;
      white-space: pre-wrap;
      word-break: break-word;
      color: #374151;
    }
    
    .error-message {
      background: #fef2f2;
      color: #991b1b;
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      border-left: 4px solid #ef4444;
    }
    
    .loading-demo {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
    }
    
    .demo-controls {
      margin-top: 20px;
      display: flex;
      gap: 10px;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .demo-controls button {
      padding: 10px 20px;
      border: 1px solid #d1d5db;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    
    .demo-controls button:hover {
      background: #f3f4f6;
      border-color: #9ca3af;
    }
    
    .demo-controls button.active {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }
    
    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
    }
    
    .status-indicator.success {
      background: #10b981;
    }
    
    .status-indicator.error {
      background: #ef4444;
    }
    
    .status-indicator.warning {
      background: #f59e0b;
    }
    
    @media (max-width: 768px) {
      .dashboard {
        grid-template-columns: 1fr;
      }
      
      .performance-grid {
        grid-template-columns: 1fr;
      }
      
      .header h1 {
        font-size: 2em;
      }
      
      .demo-controls {
        flex-direction: column;
        align-items: center;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>🧪 Week 3 基础集成测试</h1>
    <div class="subtitle">
      任务1.4: ConfigManager + LazyLoader + LoadingIndicator 综合验证<br>
      测试时间: {new Date().toLocaleString()}
    </div>
  </div>

  <!-- 仪表板 -->
  <div class="dashboard">
    <div class={`metric-card ${successRate === '100.0' ? 'success' : successRate === '0.0' ? 'error' : 'warning'}`}>
      <div class="metric-value">{successRate}%</div>
      <div class="metric-label">测试通过率</div>
    </div>
    <div class="metric-card">
      <div class="metric-value">{performanceScore}</div>
      <div class="metric-label">性能评分</div>
    </div>
    <div class="metric-card">
      <div class="metric-value">{successCount}/{totalTests}</div>
      <div class="metric-label">通过/总数</div>
    </div>
    <div class="metric-card">
      <div class="metric-value">{(performanceMetrics.totalTestTime / 1000).toFixed(1)}s</div>
      <div class="metric-label">总测试时间</div>
    </div>
  </div>

  <!-- 性能监控面板 -->
  <div class="performance-panel">
    <h2>📊 性能监控面板</h2>
    <div class="performance-grid">
      <div class="performance-item">
        <div class="performance-time">{performanceMetrics.configLoadTime.toFixed(0)}ms</div>
        <div class="performance-desc">配置加载时间</div>
        <div class="status-indicator {performanceMetrics.configLoadTime < 1000 ? 'success' : 'warning'}"></div>
      </div>
      <div class="performance-item">
        <div class="performance-time">{performanceMetrics.categoryLoadTime.toFixed(0)}ms</div>
        <div class="performance-desc">分类加载时间</div>
        <div class="status-indicator {performanceMetrics.categoryLoadTime < 2000 ? 'success' : 'warning'}"></div>
      </div>
      <div class="performance-item">
        <div class="performance-time">{performanceMetrics.cacheHitTime.toFixed(1)}ms</div>
        <div class="performance-desc">缓存命中时间</div>
        <div class="status-indicator {performanceMetrics.cacheHitTime < 10 ? 'success' : 'warning'}"></div>
      </div>
      <div class="performance-item">
        <div class="performance-time">{(performanceMetrics.totalTestTime / 1000).toFixed(1)}s</div>
        <div class="performance-desc">总测试时间</div>
        <div class="status-indicator {performanceMetrics.totalTestTime < 10000 ? 'success' : 'warning'}"></div>
      </div>
    </div>
  </div>

  <!-- 加载状态演示 -->
  <div class="loading-demo">
    <h2>⏳ 加载状态演示</h2>
    <div id="loading-demo-area">
      <LoadingIndicator 
        isLoading={false}
        type="spinner" 
        size="medium" 
        message="点击下方按钮开始演示" 
      />
    </div>
    <div class="demo-controls">
      <button onclick="demoConfigLoad()">配置加载</button>
      <button onclick="demoCategoryLoad()">分类加载</button>
      <button onclick="demoCacheHit()">缓存命中</button>
      <button onclick="demoError()">错误处理</button>
      <button onclick="demoSuccess()">加载完成</button>
    </div>
  </div>

  <!-- 测试结果 -->
  <div class="test-results">
    {testResults.map((result, index) => (
      <div class="test-card">
        <div class={`test-header ${result.success ? 'success' : 'error'}`}>
          <div class="test-name">
            <span>{result.success ? '✅' : '❌'}</span>
            集成测试 {index + 1}: {result.name}
          </div>
          <div class="test-duration">{result.duration.toFixed(2)}ms</div>
        </div>
        <div class="test-content">
          <div class="test-details">
            <strong>测试详情:</strong>
            <pre>{JSON.stringify(result.details, null, 2)}</pre>
          </div>
          {result.error && (
            <div class="error-message">
              <strong>错误信息:</strong> {result.error}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <script define:vars={{ testResults, performanceMetrics }}>
    console.log('🧪 Week 3 基础集成测试页面已加载');
    console.log('📊 测试结果:', JSON.stringify(testResults, null, 2));
    console.log('⚡ 性能指标:', JSON.stringify(performanceMetrics, null, 2));

    // 演示函数
    function demoConfigLoad() {
      const area = document.getElementById('loading-demo-area');
      area.innerHTML = `
        <div class="loading-indicator loading-medium loading-spinner">
          <div class="loading-content">
            <div class="loading-spinner">
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
            </div>
            <div class="loading-message">正在加载配置文件...</div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        area.innerHTML = '<div style="color: #10b981; font-size: 1.2em;">✅ 配置加载完成 (优化格式检测成功)</div>';
      }, 2000);
    }

    function demoCategoryLoad() {
      const area = document.getElementById('loading-demo-area');
      let progress = 0;
      
      const interval = setInterval(() => {
        progress += 25;
        area.innerHTML = `
          <div class="loading-indicator loading-medium loading-progress">
            <div class="loading-content">
              <div class="loading-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: ${progress}%"></div>
                </div>
                <div class="progress-text">${progress}%</div>
              </div>
              <div class="loading-message">正在加载分类数据...</div>
            </div>
          </div>
        `;
        
        if (progress >= 100) {
          clearInterval(interval);
          setTimeout(() => {
            area.innerHTML = '<div style="color: #10b981; font-size: 1.2em;">✅ 分类数据加载完成</div>';
          }, 500);
        }
      }, 400);
    }

    function demoCacheHit() {
      const area = document.getElementById('loading-demo-area');
      area.innerHTML = `
        <div class="loading-indicator loading-medium loading-dots">
          <div class="loading-content">
            <div class="loading-dots">
              <div class="dot dot-1"></div>
              <div class="dot dot-2"></div>
              <div class="dot dot-3"></div>
            </div>
            <div class="loading-message">检查缓存...</div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        area.innerHTML = '<div style="color: #10b981; font-size: 1.2em;">⚡ 缓存命中！数据已从缓存加载</div>';
      }, 300);
    }

    function demoError() {
      const area = document.getElementById('loading-demo-area');
      area.innerHTML = `
        <div class="loading-indicator loading-medium loading-spinner">
          <div class="loading-content">
            <div class="loading-spinner">
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
              <div class="spinner-ring"></div>
            </div>
            <div class="loading-message">正在加载...</div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        area.innerHTML = '<div style="color: #ef4444; font-size: 1.2em;">❌ 加载失败，正在重试...</div>';
        
        setTimeout(() => {
          area.innerHTML = '<div style="color: #10b981; font-size: 1.2em;">✅ 重试成功！</div>';
        }, 1500);
      }, 1500);
    }

    function demoSuccess() {
      const area = document.getElementById('loading-demo-area');
      area.innerHTML = `
        <div style="color: #10b981; font-size: 1.5em; text-align: center; padding: 20px;">
          <div style="font-size: 3em; margin-bottom: 10px;">🎉</div>
          <div style="font-weight: bold;">所有测试通过！</div>
          <div style="font-size: 0.9em; opacity: 0.8; margin-top: 10px;">
            Week 3 基础功能集成测试完成<br>
            性能指标全部达标
          </div>
        </div>
      `;
    }

    // 使函数全局可用
    window.demoConfigLoad = demoConfigLoad;
    window.demoCategoryLoad = demoCategoryLoad;
    window.demoCacheHit = demoCacheHit;
    window.demoError = demoError;
    window.demoSuccess = demoSuccess;
  </script>
</body>
</html>
